// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OpenApiMessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from OpenApiMessages.proto</summary>
public static partial class OpenApiMessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for OpenApiMessages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OpenApiMessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVPcGVuQXBpTWVzc2FnZXMucHJvdG8aGk9wZW5BcGlNb2RlbE1lc3NhZ2Vz",
          "LnByb3RvIowBChlQcm90b09BQXBwbGljYXRpb25BdXRoUmVxEkcKC3BheWxv",
          "YWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOh1QUk9UT19PQV9B",
          "UFBMSUNBVElPTl9BVVRIX1JFURIQCghjbGllbnRJZBgCIAIoCRIUCgxjbGll",
          "bnRTZWNyZXQYAyACKAkiZAoZUHJvdG9PQUFwcGxpY2F0aW9uQXV0aFJlcxJH",
          "CgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTodUFJP",
          "VE9fT0FfQVBQTElDQVRJT05fQVVUSF9SRVMijgEKFVByb3RvT0FBY2NvdW50",
          "QXV0aFJlcRJDCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2Fk",
          "VHlwZToZUFJPVE9fT0FfQUNDT1VOVF9BVVRIX1JFURIbChNjdGlkVHJhZGVy",
          "QWNjb3VudElkGAIgAigDEhMKC2FjY2Vzc1Rva2VuGAMgAigJInkKFVByb3Rv",
          "T0FBY2NvdW50QXV0aFJlcxJDCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3Rv",
          "T0FQYXlsb2FkVHlwZToZUFJPVE9fT0FfQUNDT1VOVF9BVVRIX1JFUxIbChNj",
          "dGlkVHJhZGVyQWNjb3VudElkGAIgAigDIrUBCg9Qcm90b09BRXJyb3JSZXMS",
          "PAoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6ElBS",
          "T1RPX09BX0VSUk9SX1JFUxIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIgASgD",
          "EhEKCWVycm9yQ29kZRgDIAIoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRIfChdt",
          "YWludGVuYW5jZUVuZFRpbWVzdGFtcBgFIAEoAyJ6ChxQcm90b09BQ2xpZW50",
          "RGlzY29ubmVjdEV2ZW50EkoKC3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9P",
          "QVBheWxvYWRUeXBlOiBQUk9UT19PQV9DTElFTlRfRElTQ09OTkVDVF9FVkVO",
          "VBIOCgZyZWFzb24YAiABKAkiqQEKJFByb3RvT0FBY2NvdW50c1Rva2VuSW52",
          "YWxpZGF0ZWRFdmVudBJTCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQ",
          "YXlsb2FkVHlwZTopUFJPVE9fT0FfQUNDT1VOVFNfVE9LRU5fSU5WQUxJREFU",
          "RURfRVZFTlQSHAoUY3RpZFRyYWRlckFjY291bnRJZHMYAiADKAMSDgoGcmVh",
          "c29uGAMgASgJIlMKEVByb3RvT0FWZXJzaW9uUmVxEj4KC3BheWxvYWRUeXBl",
          "GAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOhRQUk9UT19PQV9WRVJTSU9O",
          "X1JFUSJkChFQcm90b09BVmVyc2lvblJlcxI+CgtwYXlsb2FkVHlwZRgBIAEo",
          "DjITLlByb3RvT0FQYXlsb2FkVHlwZToUUFJPVE9fT0FfVkVSU0lPTl9SRVMS",
          "DwoHdmVyc2lvbhgCIAIoCSKxBQoSUHJvdG9PQU5ld09yZGVyUmVxEkAKC3Bh",
          "eWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOhZQUk9UT19P",
          "QV9ORVdfT1JERVJfUkVREhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMS",
          "EAoIc3ltYm9sSWQYAyACKAMSJAoJb3JkZXJUeXBlGAQgAigOMhEuUHJvdG9P",
          "QU9yZGVyVHlwZRIkCgl0cmFkZVNpZGUYBSACKA4yES5Qcm90b09BVHJhZGVT",
          "aWRlEg4KBnZvbHVtZRgGIAIoAxISCgpsaW1pdFByaWNlGAcgASgBEhEKCXN0",
          "b3BQcmljZRgIIAEoARI6Cgt0aW1lSW5Gb3JjZRgJIAEoDjITLlByb3RvT0FU",
          "aW1lSW5Gb3JjZToQR09PRF9USUxMX0NBTkNFTBIbChNleHBpcmF0aW9uVGlt",
          "ZXN0YW1wGAogASgDEhAKCHN0b3BMb3NzGAsgASgBEhIKCnRha2VQcm9maXQY",
          "DCABKAESDwoHY29tbWVudBgNIAEoCRIZChFiYXNlU2xpcHBhZ2VQcmljZRgO",
          "IAEoARIYChBzbGlwcGFnZUluUG9pbnRzGA8gASgFEg0KBWxhYmVsGBAgASgJ",
          "EhIKCnBvc2l0aW9uSWQYESABKAMSFQoNY2xpZW50T3JkZXJJZBgSIAEoCRIY",
          "ChByZWxhdGl2ZVN0b3BMb3NzGBMgASgDEhoKEnJlbGF0aXZlVGFrZVByb2Zp",
          "dBgUIAEoAxIaChJndWFyYW50ZWVkU3RvcExvc3MYFSABKAgSGAoQdHJhaWxp",
          "bmdTdG9wTG9zcxgWIAEoCBI8ChFzdG9wVHJpZ2dlck1ldGhvZBgXIAEoDjIa",
          "LlByb3RvT0FPcmRlclRyaWdnZXJNZXRob2Q6BVRSQURFIpwDChVQcm90b09B",
          "RXhlY3V0aW9uRXZlbnQSQgoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09B",
          "UGF5bG9hZFR5cGU6GFBST1RPX09BX0VYRUNVVElPTl9FVkVOVBIbChNjdGlk",
          "VHJhZGVyQWNjb3VudElkGAIgAigDEiwKDWV4ZWN1dGlvblR5cGUYAyACKA4y",
          "FS5Qcm90b09BRXhlY3V0aW9uVHlwZRIiCghwb3NpdGlvbhgEIAEoCzIQLlBy",
          "b3RvT0FQb3NpdGlvbhIcCgVvcmRlchgFIAEoCzINLlByb3RvT0FPcmRlchIa",
          "CgRkZWFsGAYgASgLMgwuUHJvdG9PQURlYWwSOgoUYm9udXNEZXBvc2l0V2l0",
          "aGRyYXcYByABKAsyHC5Qcm90b09BQm9udXNEZXBvc2l0V2l0aGRyYXcSMAoP",
          "ZGVwb3NpdFdpdGhkcmF3GAggASgLMhcuUHJvdG9PQURlcG9zaXRXaXRoZHJh",
          "dxIRCgllcnJvckNvZGUYCSABKAkSFQoNaXNTZXJ2ZXJFdmVudBgKIAEoCCKK",
          "AQoVUHJvdG9PQUNhbmNlbE9yZGVyUmVxEkMKC3BheWxvYWRUeXBlGAEgASgO",
          "MhMuUHJvdG9PQVBheWxvYWRUeXBlOhlQUk9UT19PQV9DQU5DRUxfT1JERVJf",
          "UkVREhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMSDwoHb3JkZXJJZBgD",
          "IAIoAyLGAwoUUHJvdG9PQUFtZW5kT3JkZXJSZXESQgoLcGF5bG9hZFR5cGUY",
          "ASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6GFBST1RPX09BX0FNRU5EX09S",
          "REVSX1JFURIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigDEg8KB29yZGVy",
          "SWQYAyACKAMSDgoGdm9sdW1lGAQgASgDEhIKCmxpbWl0UHJpY2UYBSABKAES",
          "EQoJc3RvcFByaWNlGAYgASgBEhsKE2V4cGlyYXRpb25UaW1lc3RhbXAYByAB",
          "KAMSEAoIc3RvcExvc3MYCCABKAESEgoKdGFrZVByb2ZpdBgJIAEoARIYChBz",
          "bGlwcGFnZUluUG9pbnRzGAogASgFEhgKEHJlbGF0aXZlU3RvcExvc3MYCyAB",
          "KAMSGgoScmVsYXRpdmVUYWtlUHJvZml0GAwgASgDEhoKEmd1YXJhbnRlZWRT",
          "dG9wTG9zcxgNIAEoCBIYChB0cmFpbGluZ1N0b3BMb3NzGA4gASgIEjwKEXN0",
          "b3BUcmlnZ2VyTWV0aG9kGA8gASgOMhouUHJvdG9PQU9yZGVyVHJpZ2dlck1l",
          "dGhvZDoFVFJBREUiuAIKG1Byb3RvT0FBbWVuZFBvc2l0aW9uU0xUUFJlcRJK",
          "CgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTogUFJP",
          "VE9fT0FfQU1FTkRfUE9TSVRJT05fU0xUUF9SRVESGwoTY3RpZFRyYWRlckFj",
          "Y291bnRJZBgCIAIoAxISCgpwb3NpdGlvbklkGAMgAigDEhAKCHN0b3BMb3Nz",
          "GAQgASgBEhIKCnRha2VQcm9maXQYBSABKAESGgoSZ3VhcmFudGVlZFN0b3BM",
          "b3NzGAcgASgIEhgKEHRyYWlsaW5nU3RvcExvc3MYCCABKAgSQAoVc3RvcExv",
          "c3NUcmlnZ2VyTWV0aG9kGAkgASgOMhouUHJvdG9PQU9yZGVyVHJpZ2dlck1l",
          "dGhvZDoFVFJBREUioQEKF1Byb3RvT0FDbG9zZVBvc2l0aW9uUmVxEkUKC3Bh",
          "eWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOhtQUk9UT19P",
          "QV9DTE9TRV9QT1NJVElPTl9SRVESGwoTY3RpZFRyYWRlckFjY291bnRJZBgC",
          "IAIoAxISCgpwb3NpdGlvbklkGAMgAigDEg4KBnZvbHVtZRgEIAIoAyLiAQod",
          "UHJvdG9PQVRyYWlsaW5nU0xDaGFuZ2VkRXZlbnQSTAoLcGF5bG9hZFR5cGUY",
          "ASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6IlBST1RPX09BX1RSQUlMSU5H",
          "X1NMX0NIQU5HRURfRVZFTlQSGwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIo",
          "AxISCgpwb3NpdGlvbklkGAMgAigDEg8KB29yZGVySWQYBCACKAMSEQoJc3Rv",
          "cFByaWNlGAUgAigBEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAYBiACKAMi",
          "dQoTUHJvdG9PQUFzc2V0TGlzdFJlcRJBCgtwYXlsb2FkVHlwZRgBIAEoDjIT",
          "LlByb3RvT0FQYXlsb2FkVHlwZToXUFJPVE9fT0FfQVNTRVRfTElTVF9SRVES",
          "GwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIoAyKTAQoTUHJvdG9PQUFzc2V0",
          "TGlzdFJlcxJBCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2Fk",
          "VHlwZToXUFJPVE9fT0FfQVNTRVRfTElTVF9SRVMSGwoTY3RpZFRyYWRlckFj",
          "Y291bnRJZBgCIAIoAxIcCgVhc3NldBgDIAMoCzINLlByb3RvT0FBc3NldCJ5",
          "ChVQcm90b09BU3ltYm9sc0xpc3RSZXESQwoLcGF5bG9hZFR5cGUYASABKA4y",
          "Ey5Qcm90b09BUGF5bG9hZFR5cGU6GVBST1RPX09BX1NZTUJPTFNfTElTVF9S",
          "RVESGwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIoAyKeAQoVUHJvdG9PQVN5",
          "bWJvbHNMaXN0UmVzEkMKC3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBh",
          "eWxvYWRUeXBlOhlQUk9UT19PQV9TWU1CT0xTX0xJU1RfUkVTEhsKE2N0aWRU",
          "cmFkZXJBY2NvdW50SWQYAiACKAMSIwoGc3ltYm9sGAMgAygLMhMuUHJvdG9P",
          "QUxpZ2h0U3ltYm9sIooBChRQcm90b09BU3ltYm9sQnlJZFJlcRJDCgtwYXls",
          "b2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZToZUFJPVE9fT0Ff",
          "U1lNQk9MX0JZX0lEX1JFURIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigD",
          "EhAKCHN5bWJvbElkGAMgAygDIpgBChRQcm90b09BU3ltYm9sQnlJZFJlcxJD",
          "CgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZToZUFJP",
          "VE9fT0FfU1lNQk9MX0JZX0lEX1JFUxIbChNjdGlkVHJhZGVyQWNjb3VudElk",
          "GAIgAigDEh4KBnN5bWJvbBgDIAMoCzIOLlByb3RvT0FTeW1ib2witwEKHlBy",
          "b3RvT0FTeW1ib2xzRm9yQ29udmVyc2lvblJlcRJNCgtwYXlsb2FkVHlwZRgB",
          "IAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTojUFJPVE9fT0FfU1lNQk9MU19G",
          "T1JfQ09OVkVSU0lPTl9SRVESGwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIo",
          "AxIUCgxmaXJzdEFzc2V0SWQYAyACKAMSEwoLbGFzdEFzc2V0SWQYBCACKAMi",
          "sQEKHlByb3RvT0FTeW1ib2xzRm9yQ29udmVyc2lvblJlcxJNCgtwYXlsb2Fk",
          "VHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTojUFJPVE9fT0FfU1lN",
          "Qk9MU19GT1JfQ09OVkVSU0lPTl9SRVMSGwoTY3RpZFRyYWRlckFjY291bnRJ",
          "ZBgCIAIoAxIjCgZzeW1ib2wYAyADKAsyEy5Qcm90b09BTGlnaHRTeW1ib2wi",
          "kwEKGVByb3RvT0FTeW1ib2xDaGFuZ2VkRXZlbnQSRwoLcGF5bG9hZFR5cGUY",
          "ASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6HVBST1RPX09BX1NZTUJPTF9D",
          "SEFOR0VEX0VWRU5UEhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMSEAoI",
          "c3ltYm9sSWQYAyADKAMigAEKGFByb3RvT0FBc3NldENsYXNzTGlzdFJlcRJH",
          "CgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTodUFJP",
          "VE9fT0FfQVNTRVRfQ0xBU1NfTElTVF9SRVESGwoTY3RpZFRyYWRlckFjY291",
          "bnRJZBgCIAIoAyKoAQoYUHJvdG9PQUFzc2V0Q2xhc3NMaXN0UmVzEkcKC3Bh",
          "eWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOh1QUk9UT19P",
          "QV9BU1NFVF9DTEFTU19MSVNUX1JFUxIbChNjdGlkVHJhZGVyQWNjb3VudElk",
          "GAIgAigDEiYKCmFzc2V0Q2xhc3MYAyADKAsyEi5Qcm90b09BQXNzZXRDbGFz",
          "cyJuChBQcm90b09BVHJhZGVyUmVxEj0KC3BheWxvYWRUeXBlGAEgASgOMhMu",
          "UHJvdG9PQVBheWxvYWRUeXBlOhNQUk9UT19PQV9UUkFERVJfUkVREhsKE2N0",
          "aWRUcmFkZXJBY2NvdW50SWQYAiACKAMijgEKEFByb3RvT0FUcmFkZXJSZXMS",
          "PQoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6E1BS",
          "T1RPX09BX1RSQURFUl9SRVMSGwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIo",
          "AxIeCgZ0cmFkZXIYAyACKAsyDi5Qcm90b09BVHJhZGVyIqABChlQcm90b09B",
          "VHJhZGVyVXBkYXRlZEV2ZW50EkYKC3BheWxvYWRUeXBlGAEgASgOMhMuUHJv",
          "dG9PQVBheWxvYWRUeXBlOhxQUk9UT19PQV9UUkFERVJfVVBEQVRFX0VWRU5U",
          "EhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMSHgoGdHJhZGVyGAMgAigL",
          "Mg4uUHJvdG9PQVRyYWRlciJ0ChNQcm90b09BUmVjb25jaWxlUmVxEkAKC3Bh",
          "eWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOhZQUk9UT19P",
          "QV9SRUNPTkNJTEVfUkVREhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMi",
          "tgEKE1Byb3RvT0FSZWNvbmNpbGVSZXMSQAoLcGF5bG9hZFR5cGUYASABKA4y",
          "Ey5Qcm90b09BUGF5bG9hZFR5cGU6FlBST1RPX09BX1JFQ09OQ0lMRV9SRVMS",
          "GwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIoAxIiCghwb3NpdGlvbhgDIAMo",
          "CzIQLlByb3RvT0FQb3NpdGlvbhIcCgVvcmRlchgEIAMoCzINLlByb3RvT0FP",
          "cmRlciLIAQoWUHJvdG9PQU9yZGVyRXJyb3JFdmVudBJECgtwYXlsb2FkVHlw",
          "ZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZToaUFJPVE9fT0FfT1JERVJf",
          "RVJST1JfRVZFTlQSGwoTY3RpZFRyYWRlckFjY291bnRJZBgFIAIoAxIRCgll",
          "cnJvckNvZGUYAiACKAkSDwoHb3JkZXJJZBgDIAEoAxISCgpwb3NpdGlvbklk",
          "GAYgASgDEhMKC2Rlc2NyaXB0aW9uGAcgASgJIrABChJQcm90b09BRGVhbExp",
          "c3RSZXESQAoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5",
          "cGU6FlBST1RPX09BX0RFQUxfTElTVF9SRVESGwoTY3RpZFRyYWRlckFjY291",
          "bnRJZBgCIAIoAxIVCg1mcm9tVGltZXN0YW1wGAMgAigDEhMKC3RvVGltZXN0",
          "YW1wGAQgAigDEg8KB21heFJvd3MYBSABKAUioAEKElByb3RvT0FEZWFsTGlz",
          "dFJlcxJACgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlw",
          "ZToWUFJPVE9fT0FfREVBTF9MSVNUX1JFUxIbChNjdGlkVHJhZGVyQWNjb3Vu",
          "dElkGAIgAigDEhoKBGRlYWwYAyADKAsyDC5Qcm90b09BRGVhbBIPCgdoYXNN",
          "b3JlGAQgAigIIqEBChhQcm90b09BRXhwZWN0ZWRNYXJnaW5SZXESRgoLcGF5",
          "bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6HFBST1RPX09B",
          "X0VYUEVDVEVEX01BUkdJTl9SRVESGwoTY3RpZFRyYWRlckFjY291bnRJZBgC",
          "IAIoAxIQCghzeW1ib2xJZBgDIAIoAxIOCgZ2b2x1bWUYBCADKAMipwEKGFBy",
          "b3RvT0FFeHBlY3RlZE1hcmdpblJlcxJGCgtwYXlsb2FkVHlwZRgBIAEoDjIT",
          "LlByb3RvT0FQYXlsb2FkVHlwZTocUFJPVE9fT0FfRVhQRUNURURfTUFSR0lO",
          "X1JFUxIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigDEiYKBm1hcmdpbhgD",
          "IAMoCzIWLlByb3RvT0FFeHBlY3RlZE1hcmdpbiKpAQoZUHJvdG9PQU1hcmdp",
          "bkNoYW5nZWRFdmVudBJHCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQ",
          "YXlsb2FkVHlwZTodUFJPVE9fT0FfTUFSR0lOX0NIQU5HRURfRVZFTlQSGwoT",
          "Y3RpZFRyYWRlckFjY291bnRJZBgCIAIoAxISCgpwb3NpdGlvbklkGAMgAigE",
          "EhIKCnVzZWRNYXJnaW4YBCACKAQitwEKHVByb3RvT0FDYXNoRmxvd0hpc3Rv",
          "cnlMaXN0UmVxEk0KC3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxv",
          "YWRUeXBlOiNQUk9UT19PQV9DQVNIX0ZMT1dfSElTVE9SWV9MSVNUX1JFURIb",
          "ChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigDEhUKDWZyb21UaW1lc3RhbXAY",
          "AyACKAMSEwoLdG9UaW1lc3RhbXAYBCACKAMivQEKHVByb3RvT0FDYXNoRmxv",
          "d0hpc3RvcnlMaXN0UmVzEk0KC3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9P",
          "QVBheWxvYWRUeXBlOiNQUk9UT19PQV9DQVNIX0ZMT1dfSElTVE9SWV9MSVNU",
          "X1JFUxIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigDEjAKD2RlcG9zaXRX",
          "aXRoZHJhdxgDIAMoCzIXLlByb3RvT0FEZXBvc2l0V2l0aGRyYXcikQEKJVBy",
          "b3RvT0FHZXRBY2NvdW50TGlzdEJ5QWNjZXNzVG9rZW5SZXESUwoLcGF5bG9h",
          "ZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6KVBST1RPX09BX0dF",
          "VF9BQ0NPVU5UU19CWV9BQ0NFU1NfVE9LRU5fUkVREhMKC2FjY2Vzc1Rva2Vu",
          "GAIgAigJIv8BCiVQcm90b09BR2V0QWNjb3VudExpc3RCeUFjY2Vzc1Rva2Vu",
          "UmVzElMKC3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBl",
          "OilQUk9UT19PQV9HRVRfQUNDT1VOVFNfQllfQUNDRVNTX1RPS0VOX1JFUxIT",
          "CgthY2Nlc3NUb2tlbhgCIAIoCRI2Cg9wZXJtaXNzaW9uU2NvcGUYAyABKA4y",
          "HS5Qcm90b09BQ2xpZW50UGVybWlzc2lvblNjb3BlEjQKEWN0aWRUcmFkZXJB",
          "Y2NvdW50GAQgAygLMhkuUHJvdG9PQUN0aWRUcmFkZXJBY2NvdW50InQKFlBy",
          "b3RvT0FSZWZyZXNoVG9rZW5SZXESRAoLcGF5bG9hZFR5cGUYASABKA4yEy5Q",
          "cm90b09BUGF5bG9hZFR5cGU6GlBST1RPX09BX1JFRlJFU0hfVE9LRU5fUkVR",
          "EhQKDHJlZnJlc2hUb2tlbhgCIAIoCSKvAQoWUHJvdG9PQVJlZnJlc2hUb2tl",
          "blJlcxJECgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlw",
          "ZToaUFJPVE9fT0FfUkVGUkVTSF9UT0tFTl9SRVMSEwoLYWNjZXNzVG9rZW4Y",
          "AiACKAkSEQoJdG9rZW5UeXBlGAMgAigJEhEKCWV4cGlyZXNJbhgEIAIoAxIU",
          "CgxyZWZyZXNoVG9rZW4YBSACKAkikQEKGFByb3RvT0FTdWJzY3JpYmVTcG90",
          "c1JlcRJGCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlw",
          "ZTocUFJPVE9fT0FfU1VCU0NSSUJFX1NQT1RTX1JFURIbChNjdGlkVHJhZGVy",
          "QWNjb3VudElkGAIgAigDEhAKCHN5bWJvbElkGAMgAygDIn8KGFByb3RvT0FT",
          "dWJzY3JpYmVTcG90c1JlcxJGCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3Rv",
          "T0FQYXlsb2FkVHlwZTocUFJPVE9fT0FfU1VCU0NSSUJFX1NQT1RTX1JFUxIb",
          "ChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigDIpUBChpQcm90b09BVW5zdWJz",
          "Y3JpYmVTcG90c1JlcRJICgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQ",
          "YXlsb2FkVHlwZToeUFJPVE9fT0FfVU5TVUJTQ1JJQkVfU1BPVFNfUkVREhsK",
          "E2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMSEAoIc3ltYm9sSWQYAyADKAMi",
          "gwEKGlByb3RvT0FVbnN1YnNjcmliZVNwb3RzUmVzEkgKC3BheWxvYWRUeXBl",
          "GAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOh5QUk9UT19PQV9VTlNVQlND",
          "UklCRV9TUE9UU19SRVMSGwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIoAyLU",
          "AQoQUHJvdG9PQVNwb3RFdmVudBI9CgtwYXlsb2FkVHlwZRgBIAEoDjITLlBy",
          "b3RvT0FQYXlsb2FkVHlwZToTUFJPVE9fT0FfU1BPVF9FVkVOVBIbChNjdGlk",
          "VHJhZGVyQWNjb3VudElkGAIgAigDEhAKCHN5bWJvbElkGAMgAigDEgsKA2Jp",
          "ZBgEIAEoBBILCgNhc2sYBSABKAQSIgoIdHJlbmRiYXIYBiADKAsyEC5Qcm90",
          "b09BVHJlbmRiYXISFAoMc2Vzc2lvbkNsb3NlGAcgASgEIsgBCh9Qcm90b09B",
          "U3Vic2NyaWJlTGl2ZVRyZW5kYmFyUmVxEk4KC3BheWxvYWRUeXBlGAEgASgO",
          "MhMuUHJvdG9PQVBheWxvYWRUeXBlOiRQUk9UT19PQV9TVUJTQ1JJQkVfTElW",
          "RV9UUkVOREJBUl9SRVESGwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIoAxIm",
          "CgZwZXJpb2QYAyACKA4yFi5Qcm90b09BVHJlbmRiYXJQZXJpb2QSEAoIc3lt",
          "Ym9sSWQYBCACKAMijgEKH1Byb3RvT0FTdWJzY3JpYmVMaXZlVHJlbmRiYXJS",
          "ZXMSTgoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6",
          "JFBST1RPX09BX1NVQlNDUklCRV9MSVZFX1RSRU5EQkFSX1JFUxIbChNjdGlk",
          "VHJhZGVyQWNjb3VudElkGAIgAigDIswBCiFQcm90b09BVW5zdWJzY3JpYmVM",
          "aXZlVHJlbmRiYXJSZXESUAoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09B",
          "UGF5bG9hZFR5cGU6JlBST1RPX09BX1VOU1VCU0NSSUJFX0xJVkVfVFJFTkRC",
          "QVJfUkVREhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMSJgoGcGVyaW9k",
          "GAMgAigOMhYuUHJvdG9PQVRyZW5kYmFyUGVyaW9kEhAKCHN5bWJvbElkGAQg",
          "AigDIpIBCiFQcm90b09BVW5zdWJzY3JpYmVMaXZlVHJlbmRiYXJSZXMSUAoL",
          "cGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6JlBST1RP",
          "X09BX1VOU1VCU0NSSUJFX0xJVkVfVFJFTkRCQVJfUkVTEhsKE2N0aWRUcmFk",
          "ZXJBY2NvdW50SWQYAiACKAMi4QEKFlByb3RvT0FHZXRUcmVuZGJhcnNSZXES",
          "RAoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6GlBS",
          "T1RPX09BX0dFVF9UUkVOREJBUlNfUkVREhsKE2N0aWRUcmFkZXJBY2NvdW50",
          "SWQYAiACKAMSFQoNZnJvbVRpbWVzdGFtcBgDIAIoAxITCgt0b1RpbWVzdGFt",
          "cBgEIAIoAxImCgZwZXJpb2QYBSACKA4yFi5Qcm90b09BVHJlbmRiYXJQZXJp",
          "b2QSEAoIc3ltYm9sSWQYBiACKAMi7AEKFlByb3RvT0FHZXRUcmVuZGJhcnNS",
          "ZXMSRAoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6",
          "GlBST1RPX09BX0dFVF9UUkVOREJBUlNfUkVTEhsKE2N0aWRUcmFkZXJBY2Nv",
          "dW50SWQYAiACKAMSJgoGcGVyaW9kGAMgAigOMhYuUHJvdG9PQVRyZW5kYmFy",
          "UGVyaW9kEhEKCXRpbWVzdGFtcBgEIAIoAxIiCgh0cmVuZGJhchgFIAMoCzIQ",
          "LlByb3RvT0FUcmVuZGJhchIQCghzeW1ib2xJZBgGIAEoAyLYAQoVUHJvdG9P",
          "QUdldFRpY2tEYXRhUmVxEkMKC3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9P",
          "QVBheWxvYWRUeXBlOhlQUk9UT19PQV9HRVRfVElDS0RBVEFfUkVREhsKE2N0",
          "aWRUcmFkZXJBY2NvdW50SWQYAiACKAMSEAoIc3ltYm9sSWQYAyACKAMSHwoE",
          "dHlwZRgEIAIoDjIRLlByb3RvT0FRdW90ZVR5cGUSFQoNZnJvbVRpbWVzdGFt",
          "cBgFIAIoAxITCgt0b1RpbWVzdGFtcBgGIAIoAyKuAQoVUHJvdG9PQUdldFRp",
          "Y2tEYXRhUmVzEkMKC3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxv",
          "YWRUeXBlOhlQUk9UT19PQV9HRVRfVElDS0RBVEFfUkVTEhsKE2N0aWRUcmFk",
          "ZXJBY2NvdW50SWQYAiACKAMSIgoIdGlja0RhdGEYAyADKAsyEC5Qcm90b09B",
          "VGlja0RhdGESDwoHaGFzTW9yZRgEIAIoCCKIAQofUHJvdG9PQUdldEN0aWRQ",
          "cm9maWxlQnlUb2tlblJlcRJQCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3Rv",
          "T0FQYXlsb2FkVHlwZTomUFJPVE9fT0FfR0VUX0NUSURfUFJPRklMRV9CWV9U",
          "T0tFTl9SRVESEwoLYWNjZXNzVG9rZW4YAiACKAkimQEKH1Byb3RvT0FHZXRD",
          "dGlkUHJvZmlsZUJ5VG9rZW5SZXMSUAoLcGF5bG9hZFR5cGUYASABKA4yEy5Q",
          "cm90b09BUGF5bG9hZFR5cGU6JlBST1RPX09BX0dFVF9DVElEX1BST0ZJTEVf",
          "QllfVE9LRU5fUkVTEiQKB3Byb2ZpbGUYAiACKAsyEy5Qcm90b09BQ3RpZFBy",
          "b2ZpbGUixAEKEVByb3RvT0FEZXB0aEV2ZW50Ej4KC3BheWxvYWRUeXBlGAEg",
          "ASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOhRQUk9UT19PQV9ERVBUSF9FVkVO",
          "VBIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigDEhAKCHN5bWJvbElkGAMg",
          "AigEEiUKCW5ld1F1b3RlcxgEIAMoCzISLlByb3RvT0FEZXB0aFF1b3RlEhkK",
          "DWRlbGV0ZWRRdW90ZXMYBSADKARCAhABIp4BCh5Qcm90b09BU3Vic2NyaWJl",
          "RGVwdGhRdW90ZXNSZXESTQoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09B",
          "UGF5bG9hZFR5cGU6I1BST1RPX09BX1NVQlNDUklCRV9ERVBUSF9RVU9URVNf",
          "UkVREhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMSEAoIc3ltYm9sSWQY",
          "AyADKAMijAEKHlByb3RvT0FTdWJzY3JpYmVEZXB0aFF1b3Rlc1JlcxJNCgtw",
          "YXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTojUFJPVE9f",
          "T0FfU1VCU0NSSUJFX0RFUFRIX1FVT1RFU19SRVMSGwoTY3RpZFRyYWRlckFj",
          "Y291bnRJZBgCIAIoAyKiAQogUHJvdG9PQVVuc3Vic2NyaWJlRGVwdGhRdW90",
          "ZXNSZXESTwoLcGF5bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5",
          "cGU6JVBST1RPX09BX1VOU1VCU0NSSUJFX0RFUFRIX1FVT1RFU19SRVESGwoT",
          "Y3RpZFRyYWRlckFjY291bnRJZBgCIAIoAxIQCghzeW1ib2xJZBgDIAMoAyKQ",
          "AQogUHJvdG9PQVVuc3Vic2NyaWJlRGVwdGhRdW90ZXNSZXMSTwoLcGF5bG9h",
          "ZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6JVBST1RPX09BX1VO",
          "U1VCU0NSSUJFX0RFUFRIX1FVT1RFU19SRVMSGwoTY3RpZFRyYWRlckFjY291",
          "bnRJZBgCIAIoAyKDAQocUHJvdG9PQVN5bWJvbENhdGVnb3J5TGlzdFJlcRJG",
          "CgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTocUFJP",
          "VE9fT0FfU1lNQk9MX0NBVEVHT1JZX1JFURIbChNjdGlkVHJhZGVyQWNjb3Vu",
          "dElkGAIgAigDIrMBChxQcm90b09BU3ltYm9sQ2F0ZWdvcnlMaXN0UmVzEkYK",
          "C3BheWxvYWRUeXBlGAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOhxQUk9U",
          "T19PQV9TWU1CT0xfQ0FURUdPUllfUkVTEhsKE2N0aWRUcmFkZXJBY2NvdW50",
          "SWQYAiACKAMSLgoOc3ltYm9sQ2F0ZWdvcnkYAyADKAsyFi5Qcm90b09BU3lt",
          "Ym9sQ2F0ZWdvcnkifQoXUHJvdG9PQUFjY291bnRMb2dvdXRSZXESRQoLcGF5",
          "bG9hZFR5cGUYASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6G1BST1RPX09B",
          "X0FDQ09VTlRfTE9HT1VUX1JFURIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIg",
          "AigDIn0KF1Byb3RvT0FBY2NvdW50TG9nb3V0UmVzEkUKC3BheWxvYWRUeXBl",
          "GAEgASgOMhMuUHJvdG9PQVBheWxvYWRUeXBlOhtQUk9UT19PQV9BQ0NPVU5U",
          "X0xPR09VVF9SRVMSGwoTY3RpZFRyYWRlckFjY291bnRJZBgCIAIoAyKJAQod",
          "UHJvdG9PQUFjY291bnREaXNjb25uZWN0RXZlbnQSSwoLcGF5bG9hZFR5cGUY",
          "ASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6IVBST1RPX09BX0FDQ09VTlRf",
          "RElTQ09OTkVDVF9FVkVOVBIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIgAigD",
          "IoABChhQcm90b09BTWFyZ2luQ2FsbExpc3RSZXESRwoLcGF5bG9hZFR5cGUY",
          "ASABKA4yEy5Qcm90b09BUGF5bG9hZFR5cGU6HVBST1RPX09BX01BUkdJTl9D",
          "QUxMX0xJU1RfUkVREhsKE2N0aWRUcmFkZXJBY2NvdW50SWQYAiACKAMiiwEK",
          "GFByb3RvT0FNYXJnaW5DYWxsTGlzdFJlcxJHCgtwYXlsb2FkVHlwZRgBIAEo",
          "DjITLlByb3RvT0FQYXlsb2FkVHlwZTodUFJPVE9fT0FfTUFSR0lOX0NBTExf",
          "TElTVF9SRVMSJgoKbWFyZ2luQ2FsbBgCIAMoCzISLlByb3RvT0FNYXJnaW5D",
          "YWxsIqwBChpQcm90b09BTWFyZ2luQ2FsbFVwZGF0ZVJlcRJJCgtwYXlsb2Fk",
          "VHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTofUFJPVE9fT0FfTUFS",
          "R0lOX0NBTExfVVBEQVRFX1JFURIbChNjdGlkVHJhZGVyQWNjb3VudElkGAIg",
          "AigDEiYKCm1hcmdpbkNhbGwYAyACKAsyEi5Qcm90b09BTWFyZ2luQ2FsbCJn",
          "ChpQcm90b09BTWFyZ2luQ2FsbFVwZGF0ZVJlcxJJCgtwYXlsb2FkVHlwZRgB",
          "IAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZTofUFJPVE9fT0FfTUFSR0lOX0NB",
          "TExfVVBEQVRFX1JFUyKwAQocUHJvdG9PQU1hcmdpbkNhbGxVcGRhdGVFdmVu",
          "dBJLCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZToh",
          "UFJPVE9fT0FfTUFSR0lOX0NBTExfVVBEQVRFX0VWRU5UEhsKE2N0aWRUcmFk",
          "ZXJBY2NvdW50SWQYAiACKAMSJgoKbWFyZ2luQ2FsbBgDIAIoCzISLlByb3Rv",
          "T0FNYXJnaW5DYWxsIrIBCh1Qcm90b09BTWFyZ2luQ2FsbFRyaWdnZXJFdmVu",
          "dBJMCgtwYXlsb2FkVHlwZRgBIAEoDjITLlByb3RvT0FQYXlsb2FkVHlwZToi",
          "UFJPVE9fT0FfTUFSR0lOX0NBTExfVFJJR0dFUl9FVkVOVBIbChNjdGlkVHJh",
          "ZGVyQWNjb3VudElkGAIgAigDEiYKCm1hcmdpbkNhbGwYAyACKAsyEi5Qcm90",
          "b09BTWFyZ2luQ2FsbEJCCh9jb20ueHRyYWRlci5wcm90b2NvbC5vcGVuYXBp",
          "LnYyQhpDb250YWluZXJPcGVuQXBpVjJNZXNzYWdlc1ABoAEB"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::OpenApiModelMessagesReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAApplicationAuthReq), global::ProtoOAApplicationAuthReq.Parser, new[]{ "PayloadType", "ClientId", "ClientSecret" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAApplicationAuthRes), global::ProtoOAApplicationAuthRes.Parser, new[]{ "PayloadType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAccountAuthReq), global::ProtoOAAccountAuthReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "AccessToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAccountAuthRes), global::ProtoOAAccountAuthRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAErrorRes), global::ProtoOAErrorRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "ErrorCode", "Description", "MaintenanceEndTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAClientDisconnectEvent), global::ProtoOAClientDisconnectEvent.Parser, new[]{ "PayloadType", "Reason" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAccountsTokenInvalidatedEvent), global::ProtoOAAccountsTokenInvalidatedEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountIds", "Reason" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAVersionReq), global::ProtoOAVersionReq.Parser, new[]{ "PayloadType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAVersionRes), global::ProtoOAVersionRes.Parser, new[]{ "PayloadType", "Version" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOANewOrderReq), global::ProtoOANewOrderReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId", "OrderType", "TradeSide", "Volume", "LimitPrice", "StopPrice", "TimeInForce", "ExpirationTimestamp", "StopLoss", "TakeProfit", "Comment", "BaseSlippagePrice", "SlippageInPoints", "Label", "PositionId", "ClientOrderId", "RelativeStopLoss", "RelativeTakeProfit", "GuaranteedStopLoss", "TrailingStopLoss", "StopTriggerMethod" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAExecutionEvent), global::ProtoOAExecutionEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "ExecutionType", "Position", "Order", "Deal", "BonusDepositWithdraw", "DepositWithdraw", "ErrorCode", "IsServerEvent" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOACancelOrderReq), global::ProtoOACancelOrderReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "OrderId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAmendOrderReq), global::ProtoOAAmendOrderReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "OrderId", "Volume", "LimitPrice", "StopPrice", "ExpirationTimestamp", "StopLoss", "TakeProfit", "SlippageInPoints", "RelativeStopLoss", "RelativeTakeProfit", "GuaranteedStopLoss", "TrailingStopLoss", "StopTriggerMethod" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAmendPositionSLTPReq), global::ProtoOAAmendPositionSLTPReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "PositionId", "StopLoss", "TakeProfit", "GuaranteedStopLoss", "TrailingStopLoss", "StopLossTriggerMethod" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAClosePositionReq), global::ProtoOAClosePositionReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "PositionId", "Volume" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATrailingSLChangedEvent), global::ProtoOATrailingSLChangedEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "PositionId", "OrderId", "StopPrice", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAssetListReq), global::ProtoOAAssetListReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAssetListRes), global::ProtoOAAssetListRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Asset" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolsListReq), global::ProtoOASymbolsListReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolsListRes), global::ProtoOASymbolsListRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Symbol" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolByIdReq), global::ProtoOASymbolByIdReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolByIdRes), global::ProtoOASymbolByIdRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Symbol" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolsForConversionReq), global::ProtoOASymbolsForConversionReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "FirstAssetId", "LastAssetId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolsForConversionRes), global::ProtoOASymbolsForConversionRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Symbol" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolChangedEvent), global::ProtoOASymbolChangedEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAssetClassListReq), global::ProtoOAAssetClassListReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAssetClassListRes), global::ProtoOAAssetClassListRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "AssetClass" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATraderReq), global::ProtoOATraderReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATraderRes), global::ProtoOATraderRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Trader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATraderUpdatedEvent), global::ProtoOATraderUpdatedEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Trader" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAReconcileReq), global::ProtoOAReconcileReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAReconcileRes), global::ProtoOAReconcileRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Position", "Order" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAOrderErrorEvent), global::ProtoOAOrderErrorEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "ErrorCode", "OrderId", "PositionId", "Description" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOADealListReq), global::ProtoOADealListReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "FromTimestamp", "ToTimestamp", "MaxRows" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOADealListRes), global::ProtoOADealListRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Deal", "HasMore" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAExpectedMarginReq), global::ProtoOAExpectedMarginReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId", "Volume" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAExpectedMarginRes), global::ProtoOAExpectedMarginRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Margin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginChangedEvent), global::ProtoOAMarginChangedEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "PositionId", "UsedMargin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOACashFlowHistoryListReq), global::ProtoOACashFlowHistoryListReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "FromTimestamp", "ToTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOACashFlowHistoryListRes), global::ProtoOACashFlowHistoryListRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "DepositWithdraw" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetAccountListByAccessTokenReq), global::ProtoOAGetAccountListByAccessTokenReq.Parser, new[]{ "PayloadType", "AccessToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetAccountListByAccessTokenRes), global::ProtoOAGetAccountListByAccessTokenRes.Parser, new[]{ "PayloadType", "AccessToken", "PermissionScope", "CtidTraderAccount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOARefreshTokenReq), global::ProtoOARefreshTokenReq.Parser, new[]{ "PayloadType", "RefreshToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOARefreshTokenRes), global::ProtoOARefreshTokenRes.Parser, new[]{ "PayloadType", "AccessToken", "TokenType", "ExpiresIn", "RefreshToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASubscribeSpotsReq), global::ProtoOASubscribeSpotsReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASubscribeSpotsRes), global::ProtoOASubscribeSpotsRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAUnsubscribeSpotsReq), global::ProtoOAUnsubscribeSpotsReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAUnsubscribeSpotsRes), global::ProtoOAUnsubscribeSpotsRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASpotEvent), global::ProtoOASpotEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId", "Bid", "Ask", "Trendbar", "SessionClose" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASubscribeLiveTrendbarReq), global::ProtoOASubscribeLiveTrendbarReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Period", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASubscribeLiveTrendbarRes), global::ProtoOASubscribeLiveTrendbarRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAUnsubscribeLiveTrendbarReq), global::ProtoOAUnsubscribeLiveTrendbarReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Period", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAUnsubscribeLiveTrendbarRes), global::ProtoOAUnsubscribeLiveTrendbarRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetTrendbarsReq), global::ProtoOAGetTrendbarsReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "FromTimestamp", "ToTimestamp", "Period", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetTrendbarsRes), global::ProtoOAGetTrendbarsRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "Period", "Timestamp", "Trendbar", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetTickDataReq), global::ProtoOAGetTickDataReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId", "Type", "FromTimestamp", "ToTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetTickDataRes), global::ProtoOAGetTickDataRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "TickData", "HasMore" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetCtidProfileByTokenReq), global::ProtoOAGetCtidProfileByTokenReq.Parser, new[]{ "PayloadType", "AccessToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAGetCtidProfileByTokenRes), global::ProtoOAGetCtidProfileByTokenRes.Parser, new[]{ "PayloadType", "Profile" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOADepthEvent), global::ProtoOADepthEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId", "NewQuotes", "DeletedQuotes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASubscribeDepthQuotesReq), global::ProtoOASubscribeDepthQuotesReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASubscribeDepthQuotesRes), global::ProtoOASubscribeDepthQuotesRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAUnsubscribeDepthQuotesReq), global::ProtoOAUnsubscribeDepthQuotesReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAUnsubscribeDepthQuotesRes), global::ProtoOAUnsubscribeDepthQuotesRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolCategoryListReq), global::ProtoOASymbolCategoryListReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolCategoryListRes), global::ProtoOASymbolCategoryListRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "SymbolCategory" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAccountLogoutReq), global::ProtoOAAccountLogoutReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAccountLogoutRes), global::ProtoOAAccountLogoutRes.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAccountDisconnectEvent), global::ProtoOAAccountDisconnectEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginCallListReq), global::ProtoOAMarginCallListReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginCallListRes), global::ProtoOAMarginCallListRes.Parser, new[]{ "PayloadType", "MarginCall" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginCallUpdateReq), global::ProtoOAMarginCallUpdateReq.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "MarginCall" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginCallUpdateRes), global::ProtoOAMarginCallUpdateRes.Parser, new[]{ "PayloadType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginCallUpdateEvent), global::ProtoOAMarginCallUpdateEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "MarginCall" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginCallTriggerEvent), global::ProtoOAMarginCallTriggerEvent.Parser, new[]{ "PayloadType", "CtidTraderAccountId", "MarginCall" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///* Request for the authorizing an application to work with the cTrader platform Proxies. 
/// </summary>
public sealed partial class ProtoOAApplicationAuthReq : pb::IMessage<ProtoOAApplicationAuthReq> {
  private static readonly pb::MessageParser<ProtoOAApplicationAuthReq> _parser = new pb::MessageParser<ProtoOAApplicationAuthReq>(() => new ProtoOAApplicationAuthReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAApplicationAuthReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAApplicationAuthReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAApplicationAuthReq(ProtoOAApplicationAuthReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    clientId_ = other.clientId_;
    clientSecret_ = other.clientSecret_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAApplicationAuthReq Clone() {
    return new ProtoOAApplicationAuthReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaApplicationAuthReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "clientId" field.</summary>
  public const int ClientIdFieldNumber = 2;
  private readonly static string ClientIdDefaultValue = "";

  private string clientId_;
  /// <summary>
  ///The unique Client ID provided during the registration.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientId {
    get { return clientId_ ?? ClientIdDefaultValue; }
    set {
      clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientId {
    get { return clientId_ != null; }
  }
  /// <summary>Clears the value of the "clientId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientId() {
    clientId_ = null;
  }

  /// <summary>Field number for the "clientSecret" field.</summary>
  public const int ClientSecretFieldNumber = 3;
  private readonly static string ClientSecretDefaultValue = "";

  private string clientSecret_;
  /// <summary>
  ///The unique Client Secret provided during the registration.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientSecret {
    get { return clientSecret_ ?? ClientSecretDefaultValue; }
    set {
      clientSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientSecret" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientSecret {
    get { return clientSecret_ != null; }
  }
  /// <summary>Clears the value of the "clientSecret" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientSecret() {
    clientSecret_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAApplicationAuthReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAApplicationAuthReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (ClientId != other.ClientId) return false;
    if (ClientSecret != other.ClientSecret) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasClientId) hash ^= ClientId.GetHashCode();
    if (HasClientSecret) hash ^= ClientSecret.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasClientId) {
      output.WriteRawTag(18);
      output.WriteString(ClientId);
    }
    if (HasClientSecret) {
      output.WriteRawTag(26);
      output.WriteString(ClientSecret);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasClientId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
    }
    if (HasClientSecret) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSecret);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAApplicationAuthReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasClientId) {
      ClientId = other.ClientId;
    }
    if (other.HasClientSecret) {
      ClientSecret = other.ClientSecret;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          ClientId = input.ReadString();
          break;
        }
        case 26: {
          ClientSecret = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAApplicationAuthReq request. 
/// </summary>
public sealed partial class ProtoOAApplicationAuthRes : pb::IMessage<ProtoOAApplicationAuthRes> {
  private static readonly pb::MessageParser<ProtoOAApplicationAuthRes> _parser = new pb::MessageParser<ProtoOAApplicationAuthRes>(() => new ProtoOAApplicationAuthRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAApplicationAuthRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAApplicationAuthRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAApplicationAuthRes(ProtoOAApplicationAuthRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAApplicationAuthRes Clone() {
    return new ProtoOAApplicationAuthRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaApplicationAuthRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAApplicationAuthRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAApplicationAuthRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAApplicationAuthRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for the authorizing trading account session. Requires established authorized connection with the client application using ProtoOAApplicationAuthReq. 
/// </summary>
public sealed partial class ProtoOAAccountAuthReq : pb::IMessage<ProtoOAAccountAuthReq> {
  private static readonly pb::MessageParser<ProtoOAAccountAuthReq> _parser = new pb::MessageParser<ProtoOAAccountAuthReq>(() => new ProtoOAAccountAuthReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAccountAuthReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountAuthReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountAuthReq(ProtoOAAccountAuthReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    accessToken_ = other.accessToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountAuthReq Clone() {
    return new ProtoOAAccountAuthReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAccountAuthReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 3;
  private readonly static string AccessTokenDefaultValue = "";

  private string accessToken_;
  /// <summary>
  /// The Access Token issued for providing access to the Trader's Account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_ ?? AccessTokenDefaultValue; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accessToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessToken {
    get { return accessToken_ != null; }
  }
  /// <summary>Clears the value of the "accessToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessToken() {
    accessToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAccountAuthReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAccountAuthReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (AccessToken != other.AccessToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasAccessToken) hash ^= AccessToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasAccessToken) {
      output.WriteRawTag(26);
      output.WriteString(AccessToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasAccessToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAccountAuthReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasAccessToken) {
      AccessToken = other.AccessToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          AccessToken = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAApplicationAuthRes request. 
/// </summary>
public sealed partial class ProtoOAAccountAuthRes : pb::IMessage<ProtoOAAccountAuthRes> {
  private static readonly pb::MessageParser<ProtoOAAccountAuthRes> _parser = new pb::MessageParser<ProtoOAAccountAuthRes>(() => new ProtoOAAccountAuthRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAccountAuthRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountAuthRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountAuthRes(ProtoOAAccountAuthRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountAuthRes Clone() {
    return new ProtoOAAccountAuthRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAccountAuthRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAccountAuthRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAccountAuthRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAccountAuthRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Generic response when an ERROR occurred. 
/// </summary>
public sealed partial class ProtoOAErrorRes : pb::IMessage<ProtoOAErrorRes> {
  private static readonly pb::MessageParser<ProtoOAErrorRes> _parser = new pb::MessageParser<ProtoOAErrorRes>(() => new ProtoOAErrorRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAErrorRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAErrorRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAErrorRes(ProtoOAErrorRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    errorCode_ = other.errorCode_;
    description_ = other.description_;
    maintenanceEndTimestamp_ = other.maintenanceEndTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAErrorRes Clone() {
    return new ProtoOAErrorRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaErrorRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  ///The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "errorCode" field.</summary>
  public const int ErrorCodeFieldNumber = 3;
  private readonly static string ErrorCodeDefaultValue = "";

  private string errorCode_;
  /// <summary>
  /// The name of the ProtoErrorCode or the other custom ErrorCodes (e.g. ProtoCHErrorCode).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorCode {
    get { return errorCode_ ?? ErrorCodeDefaultValue; }
    set {
      errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "errorCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasErrorCode {
    get { return errorCode_ != null; }
  }
  /// <summary>Clears the value of the "errorCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearErrorCode() {
    errorCode_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// The error description.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "maintenanceEndTimestamp" field.</summary>
  public const int MaintenanceEndTimestampFieldNumber = 5;
  private readonly static long MaintenanceEndTimestampDefaultValue = 0L;

  private long maintenanceEndTimestamp_;
  /// <summary>
  /// The timestamp in seconds when the current maintenance session will be ended.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MaintenanceEndTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return maintenanceEndTimestamp_; } else { return MaintenanceEndTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      maintenanceEndTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "maintenanceEndTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaintenanceEndTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "maintenanceEndTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaintenanceEndTimestamp() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAErrorRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAErrorRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (ErrorCode != other.ErrorCode) return false;
    if (Description != other.Description) return false;
    if (MaintenanceEndTimestamp != other.MaintenanceEndTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasMaintenanceEndTimestamp) hash ^= MaintenanceEndTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasErrorCode) {
      output.WriteRawTag(26);
      output.WriteString(ErrorCode);
    }
    if (HasDescription) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (HasMaintenanceEndTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(MaintenanceEndTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasErrorCode) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasMaintenanceEndTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaintenanceEndTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAErrorRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasErrorCode) {
      ErrorCode = other.ErrorCode;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasMaintenanceEndTimestamp) {
      MaintenanceEndTimestamp = other.MaintenanceEndTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          ErrorCode = input.ReadString();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          MaintenanceEndTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when the connection with the client application is cancelled by the server. All the sessions for the traders' accounts will be terminated. 
/// </summary>
public sealed partial class ProtoOAClientDisconnectEvent : pb::IMessage<ProtoOAClientDisconnectEvent> {
  private static readonly pb::MessageParser<ProtoOAClientDisconnectEvent> _parser = new pb::MessageParser<ProtoOAClientDisconnectEvent>(() => new ProtoOAClientDisconnectEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAClientDisconnectEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAClientDisconnectEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAClientDisconnectEvent(ProtoOAClientDisconnectEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    reason_ = other.reason_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAClientDisconnectEvent Clone() {
    return new ProtoOAClientDisconnectEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaClientDisconnectEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 2;
  private readonly static string ReasonDefaultValue = "";

  private string reason_;
  /// <summary>
  /// The disconnection reason explained. For example: The application access was blocked by cTrader Administrator.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Reason {
    get { return reason_ ?? ReasonDefaultValue; }
    set {
      reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "reason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReason {
    get { return reason_ != null; }
  }
  /// <summary>Clears the value of the "reason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReason() {
    reason_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAClientDisconnectEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAClientDisconnectEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (Reason != other.Reason) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasReason) hash ^= Reason.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasReason) {
      output.WriteRawTag(18);
      output.WriteString(Reason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasReason) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAClientDisconnectEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasReason) {
      Reason = other.Reason;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          Reason = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when a session to a specific trader's account is terminated by the server but the existing connections with the other trader's accounts are maintained. 
/// </summary>
public sealed partial class ProtoOAAccountsTokenInvalidatedEvent : pb::IMessage<ProtoOAAccountsTokenInvalidatedEvent> {
  private static readonly pb::MessageParser<ProtoOAAccountsTokenInvalidatedEvent> _parser = new pb::MessageParser<ProtoOAAccountsTokenInvalidatedEvent>(() => new ProtoOAAccountsTokenInvalidatedEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAccountsTokenInvalidatedEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountsTokenInvalidatedEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountsTokenInvalidatedEvent(ProtoOAAccountsTokenInvalidatedEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountIds_ = other.ctidTraderAccountIds_.Clone();
    reason_ = other.reason_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountsTokenInvalidatedEvent Clone() {
    return new ProtoOAAccountsTokenInvalidatedEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAccountsTokenInvalidatedEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountIds" field.</summary>
  public const int CtidTraderAccountIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<long> _repeated_ctidTraderAccountIds_codec
      = pb::FieldCodec.ForInt64(16);
  private readonly pbc::RepeatedField<long> ctidTraderAccountIds_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> CtidTraderAccountIds {
    get { return ctidTraderAccountIds_; }
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 3;
  private readonly static string ReasonDefaultValue = "";

  private string reason_;
  /// <summary>
  /// The disconnection reason explained. For example: Access Token is expired or recalled.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Reason {
    get { return reason_ ?? ReasonDefaultValue; }
    set {
      reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "reason" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReason {
    get { return reason_ != null; }
  }
  /// <summary>Clears the value of the "reason" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReason() {
    reason_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAccountsTokenInvalidatedEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAccountsTokenInvalidatedEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if(!ctidTraderAccountIds_.Equals(other.ctidTraderAccountIds_)) return false;
    if (Reason != other.Reason) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    hash ^= ctidTraderAccountIds_.GetHashCode();
    if (HasReason) hash ^= Reason.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    ctidTraderAccountIds_.WriteTo(output, _repeated_ctidTraderAccountIds_codec);
    if (HasReason) {
      output.WriteRawTag(26);
      output.WriteString(Reason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    size += ctidTraderAccountIds_.CalculateSize(_repeated_ctidTraderAccountIds_codec);
    if (HasReason) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAccountsTokenInvalidatedEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    ctidTraderAccountIds_.Add(other.ctidTraderAccountIds_);
    if (other.HasReason) {
      Reason = other.Reason;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18:
        case 16: {
          ctidTraderAccountIds_.AddEntriesFrom(input, _repeated_ctidTraderAccountIds_codec);
          break;
        }
        case 26: {
          Reason = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting the proxy version. Can be used to check the current version of the Open API scheme. 
/// </summary>
public sealed partial class ProtoOAVersionReq : pb::IMessage<ProtoOAVersionReq> {
  private static readonly pb::MessageParser<ProtoOAVersionReq> _parser = new pb::MessageParser<ProtoOAVersionReq>(() => new ProtoOAVersionReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAVersionReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAVersionReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAVersionReq(ProtoOAVersionReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAVersionReq Clone() {
    return new ProtoOAVersionReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaVersionReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAVersionReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAVersionReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAVersionReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAVersionReq request. 
/// </summary>
public sealed partial class ProtoOAVersionRes : pb::IMessage<ProtoOAVersionRes> {
  private static readonly pb::MessageParser<ProtoOAVersionRes> _parser = new pb::MessageParser<ProtoOAVersionRes>(() => new ProtoOAVersionRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAVersionRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAVersionRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAVersionRes(ProtoOAVersionRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    version_ = other.version_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAVersionRes Clone() {
    return new ProtoOAVersionRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaVersionRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 2;
  private readonly static string VersionDefaultValue = "";

  private string version_;
  /// <summary>
  /// The current version of the server application.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_ ?? VersionDefaultValue; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVersion {
    get { return version_ != null; }
  }
  /// <summary>Clears the value of the "version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVersion() {
    version_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAVersionRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAVersionRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (Version != other.Version) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasVersion) hash ^= Version.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasVersion) {
      output.WriteRawTag(18);
      output.WriteString(Version);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasVersion) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAVersionRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasVersion) {
      Version = other.Version;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          Version = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for sending a new trading order. Allowed only if the accessToken has the "trade" permissions for the trading account. 
/// </summary>
public sealed partial class ProtoOANewOrderReq : pb::IMessage<ProtoOANewOrderReq> {
  private static readonly pb::MessageParser<ProtoOANewOrderReq> _parser = new pb::MessageParser<ProtoOANewOrderReq>(() => new ProtoOANewOrderReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOANewOrderReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOANewOrderReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOANewOrderReq(ProtoOANewOrderReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_;
    orderType_ = other.orderType_;
    tradeSide_ = other.tradeSide_;
    volume_ = other.volume_;
    limitPrice_ = other.limitPrice_;
    stopPrice_ = other.stopPrice_;
    timeInForce_ = other.timeInForce_;
    expirationTimestamp_ = other.expirationTimestamp_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    comment_ = other.comment_;
    baseSlippagePrice_ = other.baseSlippagePrice_;
    slippageInPoints_ = other.slippageInPoints_;
    label_ = other.label_;
    positionId_ = other.positionId_;
    clientOrderId_ = other.clientOrderId_;
    relativeStopLoss_ = other.relativeStopLoss_;
    relativeTakeProfit_ = other.relativeTakeProfit_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    trailingStopLoss_ = other.trailingStopLoss_;
    stopTriggerMethod_ = other.stopTriggerMethod_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOANewOrderReq Clone() {
    return new ProtoOANewOrderReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaNewOrderReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// The unique identifier of a symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 4) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "orderType" field.</summary>
  public const int OrderTypeFieldNumber = 4;
  private readonly static global::ProtoOAOrderType OrderTypeDefaultValue = global::ProtoOAOrderType.Market;

  private global::ProtoOAOrderType orderType_;
  /// <summary>
  /// The type of an order - MARKET, LIMIT, STOP, MARKET_RANGE, STOP_LIMIT.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAOrderType OrderType {
    get { if ((_hasBits0 & 8) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      orderType_ = value;
    }
  }
  /// <summary>Gets whether the "orderType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOrderType {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "orderType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOrderType() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "tradeSide" field.</summary>
  public const int TradeSideFieldNumber = 5;
  private readonly static global::ProtoOATradeSide TradeSideDefaultValue = global::ProtoOATradeSide.Buy;

  private global::ProtoOATradeSide tradeSide_;
  /// <summary>
  /// The trade direction - BUY or SELL.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATradeSide TradeSide {
    get { if ((_hasBits0 & 16) != 0) { return tradeSide_; } else { return TradeSideDefaultValue; } }
    set {
      _hasBits0 |= 16;
      tradeSide_ = value;
    }
  }
  /// <summary>Gets whether the "tradeSide" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTradeSide {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "tradeSide" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTradeSide() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 6;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Volume {
    get { if ((_hasBits0 & 32) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVolume {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVolume() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "limitPrice" field.</summary>
  public const int LimitPriceFieldNumber = 7;
  private readonly static double LimitPriceDefaultValue = 0D;

  private double limitPrice_;
  /// <summary>
  /// The limit price, can be specified for the LIMIT order only.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double LimitPrice {
    get { if ((_hasBits0 & 64) != 0) { return limitPrice_; } else { return LimitPriceDefaultValue; } }
    set {
      _hasBits0 |= 64;
      limitPrice_ = value;
    }
  }
  /// <summary>Gets whether the "limitPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLimitPrice {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "limitPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLimitPrice() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "stopPrice" field.</summary>
  public const int StopPriceFieldNumber = 8;
  private readonly static double StopPriceDefaultValue = 0D;

  private double stopPrice_;
  /// <summary>
  /// Stop Price, can be specified for the STOP and the STOP_LIMIT orders only.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double StopPrice {
    get { if ((_hasBits0 & 128) != 0) { return stopPrice_; } else { return StopPriceDefaultValue; } }
    set {
      _hasBits0 |= 128;
      stopPrice_ = value;
    }
  }
  /// <summary>Gets whether the "stopPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopPrice {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "stopPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopPrice() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "timeInForce" field.</summary>
  public const int TimeInForceFieldNumber = 9;
  private readonly static global::ProtoOATimeInForce TimeInForceDefaultValue = global::ProtoOATimeInForce.GoodTillCancel;

  private global::ProtoOATimeInForce timeInForce_;
  /// <summary>
  /// The specific order execution or expiration instruction - GOOD_TILL_DATE, GOOD_TILL_CANCEL, IMMEDIATE_OR_CANCEL, FILL_OR_KILL, MARKET_ON_OPEN.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATimeInForce TimeInForce {
    get { if ((_hasBits0 & 256) != 0) { return timeInForce_; } else { return TimeInForceDefaultValue; } }
    set {
      _hasBits0 |= 256;
      timeInForce_ = value;
    }
  }
  /// <summary>Gets whether the "timeInForce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimeInForce {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "timeInForce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimeInForce() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "expirationTimestamp" field.</summary>
  public const int ExpirationTimestampFieldNumber = 10;
  private readonly static long ExpirationTimestampDefaultValue = 0L;

  private long expirationTimestamp_;
  /// <summary>
  /// The exact Order expiration time. Should be set for the Good Till Date orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpirationTimestamp {
    get { if ((_hasBits0 & 512) != 0) { return expirationTimestamp_; } else { return ExpirationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 512;
      expirationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "expirationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExpirationTimestamp {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "expirationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExpirationTimestamp() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 11;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double StopLoss {
    get { if ((_hasBits0 & 1024) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopLoss {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopLoss() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 12;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// The absolute Take Profit price (1.23456 for example). Unsupported for the MARKER orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TakeProfit {
    get { if ((_hasBits0 & 2048) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTakeProfit() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 13;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// User-specified comment. MaxLength = 512.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearComment() {
    comment_ = null;
  }

  /// <summary>Field number for the "baseSlippagePrice" field.</summary>
  public const int BaseSlippagePriceFieldNumber = 14;
  private readonly static double BaseSlippagePriceDefaultValue = 0D;

  private double baseSlippagePrice_;
  /// <summary>
  /// Base price to calculate relative slippage price for MARKET_RANGE order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double BaseSlippagePrice {
    get { if ((_hasBits0 & 4096) != 0) { return baseSlippagePrice_; } else { return BaseSlippagePriceDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      baseSlippagePrice_ = value;
    }
  }
  /// <summary>Gets whether the "baseSlippagePrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBaseSlippagePrice {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "baseSlippagePrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBaseSlippagePrice() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "slippageInPoints" field.</summary>
  public const int SlippageInPointsFieldNumber = 15;
  private readonly static int SlippageInPointsDefaultValue = 0;

  private int slippageInPoints_;
  /// <summary>
  /// Slippage distance for MARKET_RANGE and STOP_LIMIT order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SlippageInPoints {
    get { if ((_hasBits0 & 8192) != 0) { return slippageInPoints_; } else { return SlippageInPointsDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      slippageInPoints_ = value;
    }
  }
  /// <summary>Gets whether the "slippageInPoints" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSlippageInPoints {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "slippageInPoints" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSlippageInPoints() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 16;
  private readonly static string LabelDefaultValue = "";

  private string label_;
  /// <summary>
  /// User-specified label. MaxLength = 100.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Label {
    get { return label_ ?? LabelDefaultValue; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "label" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLabel {
    get { return label_ != null; }
  }
  /// <summary>Clears the value of the "label" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLabel() {
    label_ = null;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 17;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// Reference to the existing position if the Order is intended to modify it.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PositionId {
    get { if ((_hasBits0 & 16384) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPositionId {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPositionId() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "clientOrderId" field.</summary>
  public const int ClientOrderIdFieldNumber = 18;
  private readonly static string ClientOrderIdDefaultValue = "";

  private string clientOrderId_;
  /// <summary>
  /// Optional user-specific clientOrderId (similar to FIX ClOrderID). MaxLength = 50.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientOrderId {
    get { return clientOrderId_ ?? ClientOrderIdDefaultValue; }
    set {
      clientOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasClientOrderId {
    get { return clientOrderId_ != null; }
  }
  /// <summary>Clears the value of the "clientOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearClientOrderId() {
    clientOrderId_ = null;
  }

  /// <summary>Field number for the "relativeStopLoss" field.</summary>
  public const int RelativeStopLossFieldNumber = 19;
  private readonly static long RelativeStopLossDefaultValue = 0L;

  private long relativeStopLoss_;
  /// <summary>
  /// Relative Stop Loss that can be specified instead of the absolute as one. Specified in 1/100000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RelativeStopLoss {
    get { if ((_hasBits0 & 32768) != 0) { return relativeStopLoss_; } else { return RelativeStopLossDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      relativeStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "relativeStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRelativeStopLoss {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "relativeStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRelativeStopLoss() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "relativeTakeProfit" field.</summary>
  public const int RelativeTakeProfitFieldNumber = 20;
  private readonly static long RelativeTakeProfitDefaultValue = 0L;

  private long relativeTakeProfit_;
  /// <summary>
  /// Relative Take Profit that can be specified instead of the absolute one. Specified in 1/100000 of unit of a price. For BUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RelativeTakeProfit {
    get { if ((_hasBits0 & 65536) != 0) { return relativeTakeProfit_; } else { return RelativeTakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      relativeTakeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "relativeTakeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRelativeTakeProfit {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "relativeTakeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRelativeTakeProfit() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 21;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then stopLoss is guaranteed. Available for the French Risk or the Guaranteed Stop Loss Accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 131072) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "trailingStopLoss" field.</summary>
  public const int TrailingStopLossFieldNumber = 22;
  private readonly static bool TrailingStopLossDefaultValue = false;

  private bool trailingStopLoss_;
  /// <summary>
  /// If TRUE then the Stop Loss is Trailing.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TrailingStopLoss {
    get { if ((_hasBits0 & 262144) != 0) { return trailingStopLoss_; } else { return TrailingStopLossDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      trailingStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "trailingStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTrailingStopLoss {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "trailingStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTrailingStopLoss() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "stopTriggerMethod" field.</summary>
  public const int StopTriggerMethodFieldNumber = 23;
  private readonly static global::ProtoOAOrderTriggerMethod StopTriggerMethodDefaultValue = global::ProtoOAOrderTriggerMethod.Trade;

  private global::ProtoOAOrderTriggerMethod stopTriggerMethod_;
  /// <summary>
  /// Trigger method for the STOP or the STOP_LIMIT pending order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAOrderTriggerMethod StopTriggerMethod {
    get { if ((_hasBits0 & 524288) != 0) { return stopTriggerMethod_; } else { return StopTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      stopTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopTriggerMethod {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "stopTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopTriggerMethod() {
    _hasBits0 &= ~524288;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOANewOrderReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOANewOrderReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (SymbolId != other.SymbolId) return false;
    if (OrderType != other.OrderType) return false;
    if (TradeSide != other.TradeSide) return false;
    if (Volume != other.Volume) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopPrice, other.StopPrice)) return false;
    if (TimeInForce != other.TimeInForce) return false;
    if (ExpirationTimestamp != other.ExpirationTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (Comment != other.Comment) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseSlippagePrice, other.BaseSlippagePrice)) return false;
    if (SlippageInPoints != other.SlippageInPoints) return false;
    if (Label != other.Label) return false;
    if (PositionId != other.PositionId) return false;
    if (ClientOrderId != other.ClientOrderId) return false;
    if (RelativeStopLoss != other.RelativeStopLoss) return false;
    if (RelativeTakeProfit != other.RelativeTakeProfit) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (TrailingStopLoss != other.TrailingStopLoss) return false;
    if (StopTriggerMethod != other.StopTriggerMethod) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasOrderType) hash ^= OrderType.GetHashCode();
    if (HasTradeSide) hash ^= TradeSide.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasLimitPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
    if (HasStopPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopPrice);
    if (HasTimeInForce) hash ^= TimeInForce.GetHashCode();
    if (HasExpirationTimestamp) hash ^= ExpirationTimestamp.GetHashCode();
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasComment) hash ^= Comment.GetHashCode();
    if (HasBaseSlippagePrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseSlippagePrice);
    if (HasSlippageInPoints) hash ^= SlippageInPoints.GetHashCode();
    if (HasLabel) hash ^= Label.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasClientOrderId) hash ^= ClientOrderId.GetHashCode();
    if (HasRelativeStopLoss) hash ^= RelativeStopLoss.GetHashCode();
    if (HasRelativeTakeProfit) hash ^= RelativeTakeProfit.GetHashCode();
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasTrailingStopLoss) hash ^= TrailingStopLoss.GetHashCode();
    if (HasStopTriggerMethod) hash ^= StopTriggerMethod.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      output.WriteRawTag(24);
      output.WriteInt64(SymbolId);
    }
    if (HasOrderType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) OrderType);
    }
    if (HasTradeSide) {
      output.WriteRawTag(40);
      output.WriteEnum((int) TradeSide);
    }
    if (HasVolume) {
      output.WriteRawTag(48);
      output.WriteInt64(Volume);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(57);
      output.WriteDouble(LimitPrice);
    }
    if (HasStopPrice) {
      output.WriteRawTag(65);
      output.WriteDouble(StopPrice);
    }
    if (HasTimeInForce) {
      output.WriteRawTag(72);
      output.WriteEnum((int) TimeInForce);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(80);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasStopLoss) {
      output.WriteRawTag(89);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(97);
      output.WriteDouble(TakeProfit);
    }
    if (HasComment) {
      output.WriteRawTag(106);
      output.WriteString(Comment);
    }
    if (HasBaseSlippagePrice) {
      output.WriteRawTag(113);
      output.WriteDouble(BaseSlippagePrice);
    }
    if (HasSlippageInPoints) {
      output.WriteRawTag(120);
      output.WriteInt32(SlippageInPoints);
    }
    if (HasLabel) {
      output.WriteRawTag(130, 1);
      output.WriteString(Label);
    }
    if (HasPositionId) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(PositionId);
    }
    if (HasClientOrderId) {
      output.WriteRawTag(146, 1);
      output.WriteString(ClientOrderId);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(168, 1);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(176, 1);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(184, 1);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasOrderType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
    }
    if (HasTradeSide) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeSide);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasLimitPrice) {
      size += 1 + 8;
    }
    if (HasStopPrice) {
      size += 1 + 8;
    }
    if (HasTimeInForce) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
    }
    if (HasExpirationTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimestamp);
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 1 + 8;
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (HasBaseSlippagePrice) {
      size += 1 + 8;
    }
    if (HasSlippageInPoints) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlippageInPoints);
    }
    if (HasLabel) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (HasPositionId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasClientOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientOrderId);
    }
    if (HasRelativeStopLoss) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeTakeProfit);
    }
    if (HasGuaranteedStopLoss) {
      size += 2 + 1;
    }
    if (HasTrailingStopLoss) {
      size += 2 + 1;
    }
    if (HasStopTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopTriggerMethod);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOANewOrderReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasOrderType) {
      OrderType = other.OrderType;
    }
    if (other.HasTradeSide) {
      TradeSide = other.TradeSide;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasLimitPrice) {
      LimitPrice = other.LimitPrice;
    }
    if (other.HasStopPrice) {
      StopPrice = other.StopPrice;
    }
    if (other.HasTimeInForce) {
      TimeInForce = other.TimeInForce;
    }
    if (other.HasExpirationTimestamp) {
      ExpirationTimestamp = other.ExpirationTimestamp;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    if (other.HasBaseSlippagePrice) {
      BaseSlippagePrice = other.BaseSlippagePrice;
    }
    if (other.HasSlippageInPoints) {
      SlippageInPoints = other.SlippageInPoints;
    }
    if (other.HasLabel) {
      Label = other.Label;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasClientOrderId) {
      ClientOrderId = other.ClientOrderId;
    }
    if (other.HasRelativeStopLoss) {
      RelativeStopLoss = other.RelativeStopLoss;
    }
    if (other.HasRelativeTakeProfit) {
      RelativeTakeProfit = other.RelativeTakeProfit;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasTrailingStopLoss) {
      TrailingStopLoss = other.TrailingStopLoss;
    }
    if (other.HasStopTriggerMethod) {
      StopTriggerMethod = other.StopTriggerMethod;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 32: {
          OrderType = (global::ProtoOAOrderType) input.ReadEnum();
          break;
        }
        case 40: {
          TradeSide = (global::ProtoOATradeSide) input.ReadEnum();
          break;
        }
        case 48: {
          Volume = input.ReadInt64();
          break;
        }
        case 57: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 65: {
          StopPrice = input.ReadDouble();
          break;
        }
        case 72: {
          TimeInForce = (global::ProtoOATimeInForce) input.ReadEnum();
          break;
        }
        case 80: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 89: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 97: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 106: {
          Comment = input.ReadString();
          break;
        }
        case 113: {
          BaseSlippagePrice = input.ReadDouble();
          break;
        }
        case 120: {
          SlippageInPoints = input.ReadInt32();
          break;
        }
        case 130: {
          Label = input.ReadString();
          break;
        }
        case 136: {
          PositionId = input.ReadInt64();
          break;
        }
        case 146: {
          ClientOrderId = input.ReadString();
          break;
        }
        case 152: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 160: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 168: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 176: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 184: {
          StopTriggerMethod = (global::ProtoOAOrderTriggerMethod) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent following the successful order acceptance or execution by the server. Acts as response to the ProtoOANewOrderReq, ProtoOACancelOrderReq, ProtoOAAmendOrderReq, ProtoOAAmendPositionSLTPReq, ProtoOAClosePositionReq requests. Also, the event is sent when a Deposit/Withdrawal took place. 
/// </summary>
public sealed partial class ProtoOAExecutionEvent : pb::IMessage<ProtoOAExecutionEvent> {
  private static readonly pb::MessageParser<ProtoOAExecutionEvent> _parser = new pb::MessageParser<ProtoOAExecutionEvent>(() => new ProtoOAExecutionEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAExecutionEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExecutionEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExecutionEvent(ProtoOAExecutionEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    executionType_ = other.executionType_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    order_ = other.order_ != null ? other.order_.Clone() : null;
    deal_ = other.deal_ != null ? other.deal_.Clone() : null;
    bonusDepositWithdraw_ = other.bonusDepositWithdraw_ != null ? other.bonusDepositWithdraw_.Clone() : null;
    depositWithdraw_ = other.depositWithdraw_ != null ? other.depositWithdraw_.Clone() : null;
    errorCode_ = other.errorCode_;
    isServerEvent_ = other.isServerEvent_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExecutionEvent Clone() {
    return new ProtoOAExecutionEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaExecutionEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "executionType" field.</summary>
  public const int ExecutionTypeFieldNumber = 3;
  private readonly static global::ProtoOAExecutionType ExecutionTypeDefaultValue = global::ProtoOAExecutionType.OrderAccepted;

  private global::ProtoOAExecutionType executionType_;
  /// <summary>
  /// Type of the order operation. For example: ACCEPTED, FILLED, etc.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAExecutionType ExecutionType {
    get { if ((_hasBits0 & 4) != 0) { return executionType_; } else { return ExecutionTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      executionType_ = value;
    }
  }
  /// <summary>Gets whether the "executionType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExecutionType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "executionType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExecutionType() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 4;
  private global::ProtoOAPosition position_;
  /// <summary>
  /// Reference to the position linked with the execution
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPosition Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 5;
  private global::ProtoOAOrder order_;
  /// <summary>
  /// Reference to the initial order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAOrder Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "deal" field.</summary>
  public const int DealFieldNumber = 6;
  private global::ProtoOADeal deal_;
  /// <summary>
  /// Reference to the deal (execution).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOADeal Deal {
    get { return deal_; }
    set {
      deal_ = value;
    }
  }

  /// <summary>Field number for the "bonusDepositWithdraw" field.</summary>
  public const int BonusDepositWithdrawFieldNumber = 7;
  private global::ProtoOABonusDepositWithdraw bonusDepositWithdraw_;
  /// <summary>
  /// Reference to the Bonus Deposit or Withdrawal operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOABonusDepositWithdraw BonusDepositWithdraw {
    get { return bonusDepositWithdraw_; }
    set {
      bonusDepositWithdraw_ = value;
    }
  }

  /// <summary>Field number for the "depositWithdraw" field.</summary>
  public const int DepositWithdrawFieldNumber = 8;
  private global::ProtoOADepositWithdraw depositWithdraw_;
  /// <summary>
  /// Reference to the Deposit or Withdrawal operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOADepositWithdraw DepositWithdraw {
    get { return depositWithdraw_; }
    set {
      depositWithdraw_ = value;
    }
  }

  /// <summary>Field number for the "errorCode" field.</summary>
  public const int ErrorCodeFieldNumber = 9;
  private readonly static string ErrorCodeDefaultValue = "";

  private string errorCode_;
  /// <summary>
  ///The name of the ProtoErrorCode or the other custom ErrorCodes (e.g. ProtoCHErrorCode).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorCode {
    get { return errorCode_ ?? ErrorCodeDefaultValue; }
    set {
      errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "errorCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasErrorCode {
    get { return errorCode_ != null; }
  }
  /// <summary>Clears the value of the "errorCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearErrorCode() {
    errorCode_ = null;
  }

  /// <summary>Field number for the "isServerEvent" field.</summary>
  public const int IsServerEventFieldNumber = 10;
  private readonly static bool IsServerEventDefaultValue = false;

  private bool isServerEvent_;
  /// <summary>
  /// If TRUE then the event generated by the server logic instead of the trader's request. (e.g. stop-out).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsServerEvent {
    get { if ((_hasBits0 & 8) != 0) { return isServerEvent_; } else { return IsServerEventDefaultValue; } }
    set {
      _hasBits0 |= 8;
      isServerEvent_ = value;
    }
  }
  /// <summary>Gets whether the "isServerEvent" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsServerEvent {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "isServerEvent" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsServerEvent() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAExecutionEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAExecutionEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (ExecutionType != other.ExecutionType) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(Order, other.Order)) return false;
    if (!object.Equals(Deal, other.Deal)) return false;
    if (!object.Equals(BonusDepositWithdraw, other.BonusDepositWithdraw)) return false;
    if (!object.Equals(DepositWithdraw, other.DepositWithdraw)) return false;
    if (ErrorCode != other.ErrorCode) return false;
    if (IsServerEvent != other.IsServerEvent) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasExecutionType) hash ^= ExecutionType.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (order_ != null) hash ^= Order.GetHashCode();
    if (deal_ != null) hash ^= Deal.GetHashCode();
    if (bonusDepositWithdraw_ != null) hash ^= BonusDepositWithdraw.GetHashCode();
    if (depositWithdraw_ != null) hash ^= DepositWithdraw.GetHashCode();
    if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
    if (HasIsServerEvent) hash ^= IsServerEvent.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasExecutionType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ExecutionType);
    }
    if (position_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Position);
    }
    if (order_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Order);
    }
    if (deal_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Deal);
    }
    if (bonusDepositWithdraw_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(BonusDepositWithdraw);
    }
    if (depositWithdraw_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(DepositWithdraw);
    }
    if (HasErrorCode) {
      output.WriteRawTag(74);
      output.WriteString(ErrorCode);
    }
    if (HasIsServerEvent) {
      output.WriteRawTag(80);
      output.WriteBool(IsServerEvent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasExecutionType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExecutionType);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (order_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Order);
    }
    if (deal_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deal);
    }
    if (bonusDepositWithdraw_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BonusDepositWithdraw);
    }
    if (depositWithdraw_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepositWithdraw);
    }
    if (HasErrorCode) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
    }
    if (HasIsServerEvent) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAExecutionEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasExecutionType) {
      ExecutionType = other.ExecutionType;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::ProtoOAPosition();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.order_ != null) {
      if (order_ == null) {
        Order = new global::ProtoOAOrder();
      }
      Order.MergeFrom(other.Order);
    }
    if (other.deal_ != null) {
      if (deal_ == null) {
        Deal = new global::ProtoOADeal();
      }
      Deal.MergeFrom(other.Deal);
    }
    if (other.bonusDepositWithdraw_ != null) {
      if (bonusDepositWithdraw_ == null) {
        BonusDepositWithdraw = new global::ProtoOABonusDepositWithdraw();
      }
      BonusDepositWithdraw.MergeFrom(other.BonusDepositWithdraw);
    }
    if (other.depositWithdraw_ != null) {
      if (depositWithdraw_ == null) {
        DepositWithdraw = new global::ProtoOADepositWithdraw();
      }
      DepositWithdraw.MergeFrom(other.DepositWithdraw);
    }
    if (other.HasErrorCode) {
      ErrorCode = other.ErrorCode;
    }
    if (other.HasIsServerEvent) {
      IsServerEvent = other.IsServerEvent;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          ExecutionType = (global::ProtoOAExecutionType) input.ReadEnum();
          break;
        }
        case 34: {
          if (position_ == null) {
            Position = new global::ProtoOAPosition();
          }
          input.ReadMessage(Position);
          break;
        }
        case 42: {
          if (order_ == null) {
            Order = new global::ProtoOAOrder();
          }
          input.ReadMessage(Order);
          break;
        }
        case 50: {
          if (deal_ == null) {
            Deal = new global::ProtoOADeal();
          }
          input.ReadMessage(Deal);
          break;
        }
        case 58: {
          if (bonusDepositWithdraw_ == null) {
            BonusDepositWithdraw = new global::ProtoOABonusDepositWithdraw();
          }
          input.ReadMessage(BonusDepositWithdraw);
          break;
        }
        case 66: {
          if (depositWithdraw_ == null) {
            DepositWithdraw = new global::ProtoOADepositWithdraw();
          }
          input.ReadMessage(DepositWithdraw);
          break;
        }
        case 74: {
          ErrorCode = input.ReadString();
          break;
        }
        case 80: {
          IsServerEvent = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for cancelling existing pending order. Allowed only if the accessToken has "trade" permissions for the trading account. 
/// </summary>
public sealed partial class ProtoOACancelOrderReq : pb::IMessage<ProtoOACancelOrderReq> {
  private static readonly pb::MessageParser<ProtoOACancelOrderReq> _parser = new pb::MessageParser<ProtoOACancelOrderReq>(() => new ProtoOACancelOrderReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOACancelOrderReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACancelOrderReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACancelOrderReq(ProtoOACancelOrderReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    orderId_ = other.orderId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACancelOrderReq Clone() {
    return new ProtoOACancelOrderReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaCancelOrderReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 3;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// The unique ID of the order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OrderId {
    get { if ((_hasBits0 & 4) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOrderId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOrderId() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOACancelOrderReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOACancelOrderReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (OrderId != other.OrderId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasOrderId) {
      output.WriteRawTag(24);
      output.WriteInt64(OrderId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOACancelOrderReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          OrderId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for amending the existing pending order. Allowed only if the Access Token has "trade" permissions for the trading account. 
/// </summary>
public sealed partial class ProtoOAAmendOrderReq : pb::IMessage<ProtoOAAmendOrderReq> {
  private static readonly pb::MessageParser<ProtoOAAmendOrderReq> _parser = new pb::MessageParser<ProtoOAAmendOrderReq>(() => new ProtoOAAmendOrderReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAmendOrderReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAmendOrderReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAmendOrderReq(ProtoOAAmendOrderReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    orderId_ = other.orderId_;
    volume_ = other.volume_;
    limitPrice_ = other.limitPrice_;
    stopPrice_ = other.stopPrice_;
    expirationTimestamp_ = other.expirationTimestamp_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    slippageInPoints_ = other.slippageInPoints_;
    relativeStopLoss_ = other.relativeStopLoss_;
    relativeTakeProfit_ = other.relativeTakeProfit_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    trailingStopLoss_ = other.trailingStopLoss_;
    stopTriggerMethod_ = other.stopTriggerMethod_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAmendOrderReq Clone() {
    return new ProtoOAAmendOrderReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAmendOrderReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 3;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// The unique ID of the order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OrderId {
    get { if ((_hasBits0 & 4) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOrderId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOrderId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 4;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume, represented in 0.01 of a unit (e.g. cents).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Volume {
    get { if ((_hasBits0 & 8) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVolume {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVolume() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "limitPrice" field.</summary>
  public const int LimitPriceFieldNumber = 5;
  private readonly static double LimitPriceDefaultValue = 0D;

  private double limitPrice_;
  /// <summary>
  /// The Limit Price, can be specified for the LIMIT order only.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double LimitPrice {
    get { if ((_hasBits0 & 16) != 0) { return limitPrice_; } else { return LimitPriceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      limitPrice_ = value;
    }
  }
  /// <summary>Gets whether the "limitPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLimitPrice {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "limitPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLimitPrice() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "stopPrice" field.</summary>
  public const int StopPriceFieldNumber = 6;
  private readonly static double StopPriceDefaultValue = 0D;

  private double stopPrice_;
  /// <summary>
  /// The Stop Price, can be specified for the STOP and the STOP_LIMIT orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double StopPrice {
    get { if ((_hasBits0 & 32) != 0) { return stopPrice_; } else { return StopPriceDefaultValue; } }
    set {
      _hasBits0 |= 32;
      stopPrice_ = value;
    }
  }
  /// <summary>Gets whether the "stopPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopPrice {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "stopPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopPrice() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "expirationTimestamp" field.</summary>
  public const int ExpirationTimestampFieldNumber = 7;
  private readonly static long ExpirationTimestampDefaultValue = 0L;

  private long expirationTimestamp_;
  /// <summary>
  /// The exact Order expiration time. Should be set for the Good Till Date orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpirationTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return expirationTimestamp_; } else { return ExpirationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      expirationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "expirationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExpirationTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "expirationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExpirationTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 8;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// The absolute Stop Loss price (e.g. 1.23456). Not supported for the MARKER orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double StopLoss {
    get { if ((_hasBits0 & 128) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 128;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopLoss {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopLoss() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 9;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// The absolute Take Profit price (e.g. 1.23456). Not supported for the MARKER orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TakeProfit {
    get { if ((_hasBits0 & 256) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 256;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTakeProfit() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "slippageInPoints" field.</summary>
  public const int SlippageInPointsFieldNumber = 10;
  private readonly static int SlippageInPointsDefaultValue = 0;

  private int slippageInPoints_;
  /// <summary>
  /// Slippage distance for the MARKET_RANGE and the STOP_LIMIT orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SlippageInPoints {
    get { if ((_hasBits0 & 512) != 0) { return slippageInPoints_; } else { return SlippageInPointsDefaultValue; } }
    set {
      _hasBits0 |= 512;
      slippageInPoints_ = value;
    }
  }
  /// <summary>Gets whether the "slippageInPoints" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSlippageInPoints {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "slippageInPoints" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSlippageInPoints() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "relativeStopLoss" field.</summary>
  public const int RelativeStopLossFieldNumber = 11;
  private readonly static long RelativeStopLossDefaultValue = 0L;

  private long relativeStopLoss_;
  /// <summary>
  /// The relative Stop Loss can be specified instead of the absolute one. Specified in 1/100000 of a unit of price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RelativeStopLoss {
    get { if ((_hasBits0 & 1024) != 0) { return relativeStopLoss_; } else { return RelativeStopLossDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      relativeStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "relativeStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRelativeStopLoss {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "relativeStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRelativeStopLoss() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "relativeTakeProfit" field.</summary>
  public const int RelativeTakeProfitFieldNumber = 12;
  private readonly static long RelativeTakeProfitDefaultValue = 0L;

  private long relativeTakeProfit_;
  /// <summary>
  /// The relative Take Profit can be specified instead of the absolute one. Specified in 1/100000 of a unit of price. For BUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RelativeTakeProfit {
    get { if ((_hasBits0 & 2048) != 0) { return relativeTakeProfit_; } else { return RelativeTakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      relativeTakeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "relativeTakeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRelativeTakeProfit {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "relativeTakeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRelativeTakeProfit() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 13;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then the Stop Loss is guaranteed. Available for the French Risk or the Guaranteed Stop Loss Accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 4096) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "trailingStopLoss" field.</summary>
  public const int TrailingStopLossFieldNumber = 14;
  private readonly static bool TrailingStopLossDefaultValue = false;

  private bool trailingStopLoss_;
  /// <summary>
  /// If TRUE then the Trailing Stop Loss is applied.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TrailingStopLoss {
    get { if ((_hasBits0 & 8192) != 0) { return trailingStopLoss_; } else { return TrailingStopLossDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      trailingStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "trailingStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTrailingStopLoss {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "trailingStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTrailingStopLoss() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "stopTriggerMethod" field.</summary>
  public const int StopTriggerMethodFieldNumber = 15;
  private readonly static global::ProtoOAOrderTriggerMethod StopTriggerMethodDefaultValue = global::ProtoOAOrderTriggerMethod.Trade;

  private global::ProtoOAOrderTriggerMethod stopTriggerMethod_;
  /// <summary>
  /// Trigger method for the STOP or the STOP_LIMIT pending order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAOrderTriggerMethod StopTriggerMethod {
    get { if ((_hasBits0 & 16384) != 0) { return stopTriggerMethod_; } else { return StopTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      stopTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopTriggerMethod {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "stopTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopTriggerMethod() {
    _hasBits0 &= ~16384;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAmendOrderReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAmendOrderReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (OrderId != other.OrderId) return false;
    if (Volume != other.Volume) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopPrice, other.StopPrice)) return false;
    if (ExpirationTimestamp != other.ExpirationTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (SlippageInPoints != other.SlippageInPoints) return false;
    if (RelativeStopLoss != other.RelativeStopLoss) return false;
    if (RelativeTakeProfit != other.RelativeTakeProfit) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (TrailingStopLoss != other.TrailingStopLoss) return false;
    if (StopTriggerMethod != other.StopTriggerMethod) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasLimitPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
    if (HasStopPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopPrice);
    if (HasExpirationTimestamp) hash ^= ExpirationTimestamp.GetHashCode();
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasSlippageInPoints) hash ^= SlippageInPoints.GetHashCode();
    if (HasRelativeStopLoss) hash ^= RelativeStopLoss.GetHashCode();
    if (HasRelativeTakeProfit) hash ^= RelativeTakeProfit.GetHashCode();
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasTrailingStopLoss) hash ^= TrailingStopLoss.GetHashCode();
    if (HasStopTriggerMethod) hash ^= StopTriggerMethod.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasOrderId) {
      output.WriteRawTag(24);
      output.WriteInt64(OrderId);
    }
    if (HasVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(Volume);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(41);
      output.WriteDouble(LimitPrice);
    }
    if (HasStopPrice) {
      output.WriteRawTag(49);
      output.WriteDouble(StopPrice);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasStopLoss) {
      output.WriteRawTag(65);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(73);
      output.WriteDouble(TakeProfit);
    }
    if (HasSlippageInPoints) {
      output.WriteRawTag(80);
      output.WriteInt32(SlippageInPoints);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(88);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(96);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(104);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(112);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(120);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasLimitPrice) {
      size += 1 + 8;
    }
    if (HasStopPrice) {
      size += 1 + 8;
    }
    if (HasExpirationTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimestamp);
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 1 + 8;
    }
    if (HasSlippageInPoints) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlippageInPoints);
    }
    if (HasRelativeStopLoss) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RelativeTakeProfit);
    }
    if (HasGuaranteedStopLoss) {
      size += 1 + 1;
    }
    if (HasTrailingStopLoss) {
      size += 1 + 1;
    }
    if (HasStopTriggerMethod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StopTriggerMethod);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAmendOrderReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasLimitPrice) {
      LimitPrice = other.LimitPrice;
    }
    if (other.HasStopPrice) {
      StopPrice = other.StopPrice;
    }
    if (other.HasExpirationTimestamp) {
      ExpirationTimestamp = other.ExpirationTimestamp;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasSlippageInPoints) {
      SlippageInPoints = other.SlippageInPoints;
    }
    if (other.HasRelativeStopLoss) {
      RelativeStopLoss = other.RelativeStopLoss;
    }
    if (other.HasRelativeTakeProfit) {
      RelativeTakeProfit = other.RelativeTakeProfit;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasTrailingStopLoss) {
      TrailingStopLoss = other.TrailingStopLoss;
    }
    if (other.HasStopTriggerMethod) {
      StopTriggerMethod = other.StopTriggerMethod;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          OrderId = input.ReadInt64();
          break;
        }
        case 32: {
          Volume = input.ReadInt64();
          break;
        }
        case 41: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 49: {
          StopPrice = input.ReadDouble();
          break;
        }
        case 56: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 65: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 73: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 80: {
          SlippageInPoints = input.ReadInt32();
          break;
        }
        case 88: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 96: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 104: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 112: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 120: {
          StopTriggerMethod = (global::ProtoOAOrderTriggerMethod) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for amending StopLoss and TakeProfit of existing position. Allowed only if the accessToken has "trade" permissions for the trading account. 
/// </summary>
public sealed partial class ProtoOAAmendPositionSLTPReq : pb::IMessage<ProtoOAAmendPositionSLTPReq> {
  private static readonly pb::MessageParser<ProtoOAAmendPositionSLTPReq> _parser = new pb::MessageParser<ProtoOAAmendPositionSLTPReq>(() => new ProtoOAAmendPositionSLTPReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAmendPositionSLTPReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAmendPositionSLTPReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAmendPositionSLTPReq(ProtoOAAmendPositionSLTPReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    positionId_ = other.positionId_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    trailingStopLoss_ = other.trailingStopLoss_;
    stopLossTriggerMethod_ = other.stopLossTriggerMethod_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAmendPositionSLTPReq Clone() {
    return new ProtoOAAmendPositionSLTPReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAmendPositionSltpReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 3;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// The unique ID of the position to amend.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 4;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// Absolute Stop Loss price (1.23456 for example).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double StopLoss {
    get { if ((_hasBits0 & 8) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 8;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopLoss {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopLoss() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 5;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// Absolute Take Profit price (1.26543 for example).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TakeProfit {
    get { if ((_hasBits0 & 16) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 16;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTakeProfit() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 7;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  ///If TRUE then the Stop Loss is guaranteed. Available for the French Risk or the Guaranteed Stop Loss Accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 32) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 32;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "trailingStopLoss" field.</summary>
  public const int TrailingStopLossFieldNumber = 8;
  private readonly static bool TrailingStopLossDefaultValue = false;

  private bool trailingStopLoss_;
  /// <summary>
  ///If TRUE then the Trailing Stop Loss is applied.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool TrailingStopLoss {
    get { if ((_hasBits0 & 64) != 0) { return trailingStopLoss_; } else { return TrailingStopLossDefaultValue; } }
    set {
      _hasBits0 |= 64;
      trailingStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "trailingStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTrailingStopLoss {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "trailingStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTrailingStopLoss() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "stopLossTriggerMethod" field.</summary>
  public const int StopLossTriggerMethodFieldNumber = 9;
  private readonly static global::ProtoOAOrderTriggerMethod StopLossTriggerMethodDefaultValue = global::ProtoOAOrderTriggerMethod.Trade;

  private global::ProtoOAOrderTriggerMethod stopLossTriggerMethod_;
  /// <summary>
  /// The Stop trigger method for the Stop Loss/Take Profit order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAOrderTriggerMethod StopLossTriggerMethod {
    get { if ((_hasBits0 & 128) != 0) { return stopLossTriggerMethod_; } else { return StopLossTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 128;
      stopLossTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopLossTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopLossTriggerMethod {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "stopLossTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopLossTriggerMethod() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAmendPositionSLTPReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAmendPositionSLTPReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (PositionId != other.PositionId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (TrailingStopLoss != other.TrailingStopLoss) return false;
    if (StopLossTriggerMethod != other.StopLossTriggerMethod) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasTrailingStopLoss) hash ^= TrailingStopLoss.GetHashCode();
    if (HasStopLossTriggerMethod) hash ^= StopLossTriggerMethod.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasStopLoss) {
      output.WriteRawTag(33);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(41);
      output.WriteDouble(TakeProfit);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(56);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(64);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(72);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 1 + 8;
    }
    if (HasGuaranteedStopLoss) {
      size += 1 + 1;
    }
    if (HasTrailingStopLoss) {
      size += 1 + 1;
    }
    if (HasStopLossTriggerMethod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StopLossTriggerMethod);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAmendPositionSLTPReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasTrailingStopLoss) {
      TrailingStopLoss = other.TrailingStopLoss;
    }
    if (other.HasStopLossTriggerMethod) {
      StopLossTriggerMethod = other.StopLossTriggerMethod;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 33: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 41: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 56: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 64: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 72: {
          StopLossTriggerMethod = (global::ProtoOAOrderTriggerMethod) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for closing or partially closing of an existing position. Allowed only if the accessToken has "trade" permissions for the trading account. 
/// </summary>
public sealed partial class ProtoOAClosePositionReq : pb::IMessage<ProtoOAClosePositionReq> {
  private static readonly pb::MessageParser<ProtoOAClosePositionReq> _parser = new pb::MessageParser<ProtoOAClosePositionReq>(() => new ProtoOAClosePositionReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAClosePositionReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAClosePositionReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAClosePositionReq(ProtoOAClosePositionReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    positionId_ = other.positionId_;
    volume_ = other.volume_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAClosePositionReq Clone() {
    return new ProtoOAClosePositionReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaClosePositionReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 3;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// The unique ID of the position to close.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 4;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume to close, represented in 0.01 of a unit (e.g. cents).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Volume {
    get { if ((_hasBits0 & 8) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVolume {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVolume() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAClosePositionReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAClosePositionReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (PositionId != other.PositionId) return false;
    if (Volume != other.Volume) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(Volume);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAClosePositionReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          Volume = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when the level of the Trailing Stop Loss is changed due to the price level changes. 
/// </summary>
public sealed partial class ProtoOATrailingSLChangedEvent : pb::IMessage<ProtoOATrailingSLChangedEvent> {
  private static readonly pb::MessageParser<ProtoOATrailingSLChangedEvent> _parser = new pb::MessageParser<ProtoOATrailingSLChangedEvent>(() => new ProtoOATrailingSLChangedEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOATrailingSLChangedEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATrailingSLChangedEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATrailingSLChangedEvent(ProtoOATrailingSLChangedEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    positionId_ = other.positionId_;
    orderId_ = other.orderId_;
    stopPrice_ = other.stopPrice_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATrailingSLChangedEvent Clone() {
    return new ProtoOATrailingSLChangedEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaTrailingSlChangedEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 3;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// The unique ID of the position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 4;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// The unique ID of the order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OrderId {
    get { if ((_hasBits0 & 8) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOrderId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOrderId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "stopPrice" field.</summary>
  public const int StopPriceFieldNumber = 5;
  private readonly static double StopPriceDefaultValue = 0D;

  private double stopPrice_;
  /// <summary>
  /// New value of the Stop Loss price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double StopPrice {
    get { if ((_hasBits0 & 16) != 0) { return stopPrice_; } else { return StopPriceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      stopPrice_ = value;
    }
  }
  /// <summary>Gets whether the "stopPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStopPrice {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "stopPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStopPrice() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 6;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// The exact UTC time when the Stop Loss was updated.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATrailingSLChangedEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOATrailingSLChangedEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (PositionId != other.PositionId) return false;
    if (OrderId != other.OrderId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopPrice, other.StopPrice)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasStopPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopPrice);
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasOrderId) {
      output.WriteRawTag(32);
      output.WriteInt64(OrderId);
    }
    if (HasStopPrice) {
      output.WriteRawTag(41);
      output.WriteDouble(StopPrice);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasStopPrice) {
      size += 1 + 8;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOATrailingSLChangedEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasStopPrice) {
      StopPrice = other.StopPrice;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          OrderId = input.ReadInt64();
          break;
        }
        case 41: {
          StopPrice = input.ReadDouble();
          break;
        }
        case 48: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for the list of assets available for a trader's account. 
/// </summary>
public sealed partial class ProtoOAAssetListReq : pb::IMessage<ProtoOAAssetListReq> {
  private static readonly pb::MessageParser<ProtoOAAssetListReq> _parser = new pb::MessageParser<ProtoOAAssetListReq>(() => new ProtoOAAssetListReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAssetListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetListReq(ProtoOAAssetListReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetListReq Clone() {
    return new ProtoOAAssetListReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAssetListReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAssetListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAssetListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAssetListReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAAssetListReq request. 
/// </summary>
public sealed partial class ProtoOAAssetListRes : pb::IMessage<ProtoOAAssetListRes> {
  private static readonly pb::MessageParser<ProtoOAAssetListRes> _parser = new pb::MessageParser<ProtoOAAssetListRes>(() => new ProtoOAAssetListRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAssetListRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetListRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetListRes(ProtoOAAssetListRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    asset_ = other.asset_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetListRes Clone() {
    return new ProtoOAAssetListRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAssetListRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "asset" field.</summary>
  public const int AssetFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOAAsset> _repeated_asset_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOAAsset.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAAsset> asset_ = new pbc::RepeatedField<global::ProtoOAAsset>();
  /// <summary>
  /// The list of assets.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOAAsset> Asset {
    get { return asset_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAssetListRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAssetListRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!asset_.Equals(other.asset_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= asset_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    asset_.WriteTo(output, _repeated_asset_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += asset_.CalculateSize(_repeated_asset_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAssetListRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    asset_.Add(other.asset_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          asset_.AddEntriesFrom(input, _repeated_asset_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for a list of symbols available for a trading account. Symbol entries are returned with the limited set of fields. 
/// </summary>
public sealed partial class ProtoOASymbolsListReq : pb::IMessage<ProtoOASymbolsListReq> {
  private static readonly pb::MessageParser<ProtoOASymbolsListReq> _parser = new pb::MessageParser<ProtoOASymbolsListReq>(() => new ProtoOASymbolsListReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolsListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsListReq(ProtoOASymbolsListReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsListReq Clone() {
    return new ProtoOASymbolsListReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolsListReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolsListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolsListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolsListReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASymbolsListReq request. 
/// </summary>
public sealed partial class ProtoOASymbolsListRes : pb::IMessage<ProtoOASymbolsListRes> {
  private static readonly pb::MessageParser<ProtoOASymbolsListRes> _parser = new pb::MessageParser<ProtoOASymbolsListRes>(() => new ProtoOASymbolsListRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolsListRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsListRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsListRes(ProtoOASymbolsListRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbol_ = other.symbol_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsListRes Clone() {
    return new ProtoOASymbolsListRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolsListRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbol" field.</summary>
  public const int SymbolFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOALightSymbol> _repeated_symbol_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOALightSymbol.Parser);
  private readonly pbc::RepeatedField<global::ProtoOALightSymbol> symbol_ = new pbc::RepeatedField<global::ProtoOALightSymbol>();
  /// <summary>
  /// The list of symbols.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOALightSymbol> Symbol {
    get { return symbol_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolsListRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolsListRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbol_.Equals(other.symbol_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbol_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbol_.WriteTo(output, _repeated_symbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbol_.CalculateSize(_repeated_symbol_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolsListRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbol_.Add(other.symbol_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting a full symbol entity. 
/// </summary>
public sealed partial class ProtoOASymbolByIdReq : pb::IMessage<ProtoOASymbolByIdReq> {
  private static readonly pb::MessageParser<ProtoOASymbolByIdReq> _parser = new pb::MessageParser<ProtoOASymbolByIdReq>(() => new ProtoOASymbolByIdReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolByIdReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolByIdReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolByIdReq(ProtoOASymbolByIdReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolByIdReq Clone() {
    return new ProtoOASymbolByIdReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolByIdReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_symbolId_codec
      = pb::FieldCodec.ForInt64(24);
  private readonly pbc::RepeatedField<long> symbolId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// Unique identifier of the symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SymbolId {
    get { return symbolId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolByIdReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolByIdReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbolId_.Equals(other.symbolId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbolId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbolId_.WriteTo(output, _repeated_symbolId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbolId_.CalculateSize(_repeated_symbolId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolByIdReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbolId_.Add(other.symbolId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          symbolId_.AddEntriesFrom(input, _repeated_symbolId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASymbolByIdReq request. 
/// </summary>
public sealed partial class ProtoOASymbolByIdRes : pb::IMessage<ProtoOASymbolByIdRes> {
  private static readonly pb::MessageParser<ProtoOASymbolByIdRes> _parser = new pb::MessageParser<ProtoOASymbolByIdRes>(() => new ProtoOASymbolByIdRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolByIdRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolByIdRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolByIdRes(ProtoOASymbolByIdRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbol_ = other.symbol_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolByIdRes Clone() {
    return new ProtoOASymbolByIdRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolByIdRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbol" field.</summary>
  public const int SymbolFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOASymbol> _repeated_symbol_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOASymbol.Parser);
  private readonly pbc::RepeatedField<global::ProtoOASymbol> symbol_ = new pbc::RepeatedField<global::ProtoOASymbol>();
  /// <summary>
  /// Symbol entity with the full set of fields.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOASymbol> Symbol {
    get { return symbol_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolByIdRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolByIdRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbol_.Equals(other.symbol_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbol_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbol_.WriteTo(output, _repeated_symbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbol_.CalculateSize(_repeated_symbol_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolByIdRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbol_.Add(other.symbol_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting a conversion chain between two assets that consists of several symbols. Use when no direct quote is available 
/// </summary>
public sealed partial class ProtoOASymbolsForConversionReq : pb::IMessage<ProtoOASymbolsForConversionReq> {
  private static readonly pb::MessageParser<ProtoOASymbolsForConversionReq> _parser = new pb::MessageParser<ProtoOASymbolsForConversionReq>(() => new ProtoOASymbolsForConversionReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolsForConversionReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsForConversionReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsForConversionReq(ProtoOASymbolsForConversionReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    firstAssetId_ = other.firstAssetId_;
    lastAssetId_ = other.lastAssetId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsForConversionReq Clone() {
    return new ProtoOASymbolsForConversionReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolsForConversionReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "firstAssetId" field.</summary>
  public const int FirstAssetIdFieldNumber = 3;
  private readonly static long FirstAssetIdDefaultValue = 0L;

  private long firstAssetId_;
  /// <summary>
  /// The ID of the firs asset in the conversation chain. e.g.: for EUR/USD the firstAssetId is EUR ID and lastAssetId is USD ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FirstAssetId {
    get { if ((_hasBits0 & 4) != 0) { return firstAssetId_; } else { return FirstAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      firstAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "firstAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFirstAssetId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "firstAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFirstAssetId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "lastAssetId" field.</summary>
  public const int LastAssetIdFieldNumber = 4;
  private readonly static long LastAssetIdDefaultValue = 0L;

  private long lastAssetId_;
  /// <summary>
  /// The ID of the last asset in the conversation chain. e.g.: for EUR/USD the firstAssetId is EUR ID and lastAssetId is USD ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastAssetId {
    get { if ((_hasBits0 & 8) != 0) { return lastAssetId_; } else { return LastAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      lastAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "lastAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLastAssetId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "lastAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLastAssetId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolsForConversionReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolsForConversionReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (FirstAssetId != other.FirstAssetId) return false;
    if (LastAssetId != other.LastAssetId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasFirstAssetId) hash ^= FirstAssetId.GetHashCode();
    if (HasLastAssetId) hash ^= LastAssetId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasFirstAssetId) {
      output.WriteRawTag(24);
      output.WriteInt64(FirstAssetId);
    }
    if (HasLastAssetId) {
      output.WriteRawTag(32);
      output.WriteInt64(LastAssetId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasFirstAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstAssetId);
    }
    if (HasLastAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastAssetId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolsForConversionReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasFirstAssetId) {
      FirstAssetId = other.FirstAssetId;
    }
    if (other.HasLastAssetId) {
      LastAssetId = other.LastAssetId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          FirstAssetId = input.ReadInt64();
          break;
        }
        case 32: {
          LastAssetId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASymbolsForConversionReq request. 
/// </summary>
public sealed partial class ProtoOASymbolsForConversionRes : pb::IMessage<ProtoOASymbolsForConversionRes> {
  private static readonly pb::MessageParser<ProtoOASymbolsForConversionRes> _parser = new pb::MessageParser<ProtoOASymbolsForConversionRes>(() => new ProtoOASymbolsForConversionRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolsForConversionRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsForConversionRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsForConversionRes(ProtoOASymbolsForConversionRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbol_ = other.symbol_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolsForConversionRes Clone() {
    return new ProtoOASymbolsForConversionRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolsForConversionRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbol" field.</summary>
  public const int SymbolFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOALightSymbol> _repeated_symbol_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOALightSymbol.Parser);
  private readonly pbc::RepeatedField<global::ProtoOALightSymbol> symbol_ = new pbc::RepeatedField<global::ProtoOALightSymbol>();
  /// <summary>
  /// Conversion chain of the symbols (e.g. EUR/USD, USD/JPY, GBP/JPY -> EUR/GBP).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOALightSymbol> Symbol {
    get { return symbol_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolsForConversionRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolsForConversionRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbol_.Equals(other.symbol_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbol_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbol_.WriteTo(output, _repeated_symbol_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbol_.CalculateSize(_repeated_symbol_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolsForConversionRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbol_.Add(other.symbol_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when the symbol is changed on the Server side. 
/// </summary>
public sealed partial class ProtoOASymbolChangedEvent : pb::IMessage<ProtoOASymbolChangedEvent> {
  private static readonly pb::MessageParser<ProtoOASymbolChangedEvent> _parser = new pb::MessageParser<ProtoOASymbolChangedEvent>(() => new ProtoOASymbolChangedEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolChangedEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolChangedEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolChangedEvent(ProtoOASymbolChangedEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolChangedEvent Clone() {
    return new ProtoOASymbolChangedEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolChangedEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_symbolId_codec
      = pb::FieldCodec.ForInt64(24);
  private readonly pbc::RepeatedField<long> symbolId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SymbolId {
    get { return symbolId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolChangedEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolChangedEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbolId_.Equals(other.symbolId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbolId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbolId_.WriteTo(output, _repeated_symbolId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbolId_.CalculateSize(_repeated_symbolId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolChangedEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbolId_.Add(other.symbolId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          symbolId_.AddEntriesFrom(input, _repeated_symbolId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for a list of asset classes available for the trader's account. 
/// </summary>
public sealed partial class ProtoOAAssetClassListReq : pb::IMessage<ProtoOAAssetClassListReq> {
  private static readonly pb::MessageParser<ProtoOAAssetClassListReq> _parser = new pb::MessageParser<ProtoOAAssetClassListReq>(() => new ProtoOAAssetClassListReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAssetClassListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetClassListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetClassListReq(ProtoOAAssetClassListReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetClassListReq Clone() {
    return new ProtoOAAssetClassListReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAssetClassListReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAssetClassListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAssetClassListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAssetClassListReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAAssetListReq request. 
/// </summary>
public sealed partial class ProtoOAAssetClassListRes : pb::IMessage<ProtoOAAssetClassListRes> {
  private static readonly pb::MessageParser<ProtoOAAssetClassListRes> _parser = new pb::MessageParser<ProtoOAAssetClassListRes>(() => new ProtoOAAssetClassListRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAssetClassListRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetClassListRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetClassListRes(ProtoOAAssetClassListRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    assetClass_ = other.assetClass_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAssetClassListRes Clone() {
    return new ProtoOAAssetClassListRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAssetClassListRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "assetClass" field.</summary>
  public const int AssetClassFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOAAssetClass> _repeated_assetClass_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOAAssetClass.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAAssetClass> assetClass_ = new pbc::RepeatedField<global::ProtoOAAssetClass>();
  /// <summary>
  /// List of the asset classes.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOAAssetClass> AssetClass {
    get { return assetClass_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAssetClassListRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAssetClassListRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!assetClass_.Equals(other.assetClass_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= assetClass_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    assetClass_.WriteTo(output, _repeated_assetClass_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += assetClass_.CalculateSize(_repeated_assetClass_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAssetClassListRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    assetClass_.Add(other.assetClass_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          assetClass_.AddEntriesFrom(input, _repeated_assetClass_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting data of Trader's Account. 
/// </summary>
public sealed partial class ProtoOATraderReq : pb::IMessage<ProtoOATraderReq> {
  private static readonly pb::MessageParser<ProtoOATraderReq> _parser = new pb::MessageParser<ProtoOATraderReq>(() => new ProtoOATraderReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOATraderReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderReq(ProtoOATraderReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderReq Clone() {
    return new ProtoOATraderReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaTraderReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATraderReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOATraderReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOATraderReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOATraderReq request. 
/// </summary>
public sealed partial class ProtoOATraderRes : pb::IMessage<ProtoOATraderRes> {
  private static readonly pb::MessageParser<ProtoOATraderRes> _parser = new pb::MessageParser<ProtoOATraderRes>(() => new ProtoOATraderRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOATraderRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderRes(ProtoOATraderRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    trader_ = other.trader_ != null ? other.trader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderRes Clone() {
    return new ProtoOATraderRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaTraderRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "trader" field.</summary>
  public const int TraderFieldNumber = 3;
  private global::ProtoOATrader trader_;
  /// <summary>
  /// The Trader account information.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATrader Trader {
    get { return trader_; }
    set {
      trader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATraderRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOATraderRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (!object.Equals(Trader, other.Trader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (trader_ != null) hash ^= Trader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (trader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Trader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (trader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOATraderRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.trader_ != null) {
      if (trader_ == null) {
        Trader = new global::ProtoOATrader();
      }
      Trader.MergeFrom(other.Trader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          if (trader_ == null) {
            Trader = new global::ProtoOATrader();
          }
          input.ReadMessage(Trader);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when a Trader is updated on Server side. 
/// </summary>
public sealed partial class ProtoOATraderUpdatedEvent : pb::IMessage<ProtoOATraderUpdatedEvent> {
  private static readonly pb::MessageParser<ProtoOATraderUpdatedEvent> _parser = new pb::MessageParser<ProtoOATraderUpdatedEvent>(() => new ProtoOATraderUpdatedEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOATraderUpdatedEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderUpdatedEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderUpdatedEvent(ProtoOATraderUpdatedEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    trader_ = other.trader_ != null ? other.trader_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOATraderUpdatedEvent Clone() {
    return new ProtoOATraderUpdatedEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaTraderUpdateEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "trader" field.</summary>
  public const int TraderFieldNumber = 3;
  private global::ProtoOATrader trader_;
  /// <summary>
  /// The Trader account information.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATrader Trader {
    get { return trader_; }
    set {
      trader_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATraderUpdatedEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOATraderUpdatedEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (!object.Equals(Trader, other.Trader)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (trader_ != null) hash ^= Trader.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (trader_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Trader);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (trader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trader);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOATraderUpdatedEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.trader_ != null) {
      if (trader_ == null) {
        Trader = new global::ProtoOATrader();
      }
      Trader.MergeFrom(other.Trader);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          if (trader_ == null) {
            Trader = new global::ProtoOATrader();
          }
          input.ReadMessage(Trader);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting Trader's current open positions and pending orders data. 
/// </summary>
public sealed partial class ProtoOAReconcileReq : pb::IMessage<ProtoOAReconcileReq> {
  private static readonly pb::MessageParser<ProtoOAReconcileReq> _parser = new pb::MessageParser<ProtoOAReconcileReq>(() => new ProtoOAReconcileReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAReconcileReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAReconcileReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAReconcileReq(ProtoOAReconcileReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAReconcileReq Clone() {
    return new ProtoOAReconcileReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaReconcileReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAReconcileReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAReconcileReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAReconcileReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* The response to the ProtoOAReconcileReq request. 
/// </summary>
public sealed partial class ProtoOAReconcileRes : pb::IMessage<ProtoOAReconcileRes> {
  private static readonly pb::MessageParser<ProtoOAReconcileRes> _parser = new pb::MessageParser<ProtoOAReconcileRes>(() => new ProtoOAReconcileRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAReconcileRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAReconcileRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAReconcileRes(ProtoOAReconcileRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    position_ = other.position_.Clone();
    order_ = other.order_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAReconcileRes Clone() {
    return new ProtoOAReconcileRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaReconcileRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOAPosition> _repeated_position_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOAPosition.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAPosition> position_ = new pbc::RepeatedField<global::ProtoOAPosition>();
  /// <summary>
  /// The list of trader's account open positions.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOAPosition> Position {
    get { return position_; }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ProtoOAOrder> _repeated_order_codec
      = pb::FieldCodec.ForMessage(34, global::ProtoOAOrder.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAOrder> order_ = new pbc::RepeatedField<global::ProtoOAOrder>();
  /// <summary>
  /// The list of trader's account pending orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOAOrder> Order {
    get { return order_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAReconcileRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAReconcileRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!position_.Equals(other.position_)) return false;
    if(!order_.Equals(other.order_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= position_.GetHashCode();
    hash ^= order_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    position_.WriteTo(output, _repeated_position_codec);
    order_.WriteTo(output, _repeated_order_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += position_.CalculateSize(_repeated_position_codec);
    size += order_.CalculateSize(_repeated_order_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAReconcileRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    position_.Add(other.position_);
    order_.Add(other.order_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          position_.AddEntriesFrom(input, _repeated_position_codec);
          break;
        }
        case 34: {
          order_.AddEntriesFrom(input, _repeated_order_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when errors occur during the order requests. 
/// </summary>
public sealed partial class ProtoOAOrderErrorEvent : pb::IMessage<ProtoOAOrderErrorEvent> {
  private static readonly pb::MessageParser<ProtoOAOrderErrorEvent> _parser = new pb::MessageParser<ProtoOAOrderErrorEvent>(() => new ProtoOAOrderErrorEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAOrderErrorEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAOrderErrorEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAOrderErrorEvent(ProtoOAOrderErrorEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    errorCode_ = other.errorCode_;
    orderId_ = other.orderId_;
    positionId_ = other.positionId_;
    description_ = other.description_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAOrderErrorEvent Clone() {
    return new ProtoOAOrderErrorEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaOrderErrorEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 5;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  ///Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 4) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "errorCode" field.</summary>
  public const int ErrorCodeFieldNumber = 2;
  private readonly static string ErrorCodeDefaultValue = "";

  private string errorCode_;
  /// <summary>
  /// The name of the ProtoErrorCode or the other custom ErrorCodes (e.g. ProtoCHErrorCode).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorCode {
    get { return errorCode_ ?? ErrorCodeDefaultValue; }
    set {
      errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "errorCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasErrorCode {
    get { return errorCode_ != null; }
  }
  /// <summary>Clears the value of the "errorCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearErrorCode() {
    errorCode_ = null;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 3;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// The unique ID of the order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OrderId {
    get { if ((_hasBits0 & 2) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasOrderId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearOrderId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 6;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// The unique ID of the position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PositionId {
    get { if ((_hasBits0 & 8) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPositionId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPositionId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 7;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// The error description.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDescription() {
    description_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAOrderErrorEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAOrderErrorEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (ErrorCode != other.ErrorCode) return false;
    if (OrderId != other.OrderId) return false;
    if (PositionId != other.PositionId) return false;
    if (Description != other.Description) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasErrorCode) {
      output.WriteRawTag(18);
      output.WriteString(ErrorCode);
    }
    if (HasOrderId) {
      output.WriteRawTag(24);
      output.WriteInt64(OrderId);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(40);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPositionId) {
      output.WriteRawTag(48);
      output.WriteInt64(PositionId);
    }
    if (HasDescription) {
      output.WriteRawTag(58);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasErrorCode) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAOrderErrorEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasErrorCode) {
      ErrorCode = other.ErrorCode;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorCode = input.ReadString();
          break;
        }
        case 24: {
          OrderId = input.ReadInt64();
          break;
        }
        case 40: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 48: {
          PositionId = input.ReadInt64();
          break;
        }
        case 58: {
          Description = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting Trader's deals historical data (execution details). 
/// </summary>
public sealed partial class ProtoOADealListReq : pb::IMessage<ProtoOADealListReq> {
  private static readonly pb::MessageParser<ProtoOADealListReq> _parser = new pb::MessageParser<ProtoOADealListReq>(() => new ProtoOADealListReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOADealListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADealListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADealListReq(ProtoOADealListReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    fromTimestamp_ = other.fromTimestamp_;
    toTimestamp_ = other.toTimestamp_;
    maxRows_ = other.maxRows_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADealListReq Clone() {
    return new ProtoOADealListReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaDealListReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fromTimestamp" field.</summary>
  public const int FromTimestampFieldNumber = 3;
  private readonly static long FromTimestampDefaultValue = 0L;

  private long fromTimestamp_;
  /// <summary>
  /// The UNIX time from which the search starts >=0 (1-1-1970). Validation: toTimestamp - fromTimestamp &lt;= 604800000 (1 week).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FromTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return fromTimestamp_; } else { return FromTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fromTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "fromTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFromTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fromTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFromTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "toTimestamp" field.</summary>
  public const int ToTimestampFieldNumber = 4;
  private readonly static long ToTimestampDefaultValue = 0L;

  private long toTimestamp_;
  /// <summary>
  /// The UNIX time where to stop searching &lt;= 2147483646000 (19-1-2038).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ToTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return toTimestamp_; } else { return ToTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      toTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "toTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasToTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "toTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearToTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "maxRows" field.</summary>
  public const int MaxRowsFieldNumber = 5;
  private readonly static int MaxRowsDefaultValue = 0;

  private int maxRows_;
  /// <summary>
  /// The maximum number of the deals to return.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxRows {
    get { if ((_hasBits0 & 16) != 0) { return maxRows_; } else { return MaxRowsDefaultValue; } }
    set {
      _hasBits0 |= 16;
      maxRows_ = value;
    }
  }
  /// <summary>Gets whether the "maxRows" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxRows {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "maxRows" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxRows() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOADealListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOADealListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (FromTimestamp != other.FromTimestamp) return false;
    if (ToTimestamp != other.ToTimestamp) return false;
    if (MaxRows != other.MaxRows) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasFromTimestamp) hash ^= FromTimestamp.GetHashCode();
    if (HasToTimestamp) hash ^= ToTimestamp.GetHashCode();
    if (HasMaxRows) hash ^= MaxRows.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasFromTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(FromTimestamp);
    }
    if (HasToTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(ToTimestamp);
    }
    if (HasMaxRows) {
      output.WriteRawTag(40);
      output.WriteInt32(MaxRows);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasFromTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromTimestamp);
    }
    if (HasToTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToTimestamp);
    }
    if (HasMaxRows) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRows);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOADealListReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasFromTimestamp) {
      FromTimestamp = other.FromTimestamp;
    }
    if (other.HasToTimestamp) {
      ToTimestamp = other.ToTimestamp;
    }
    if (other.HasMaxRows) {
      MaxRows = other.MaxRows;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          FromTimestamp = input.ReadInt64();
          break;
        }
        case 32: {
          ToTimestamp = input.ReadInt64();
          break;
        }
        case 40: {
          MaxRows = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///* The response to the ProtoOADealListRes request. 
/// </summary>
public sealed partial class ProtoOADealListRes : pb::IMessage<ProtoOADealListRes> {
  private static readonly pb::MessageParser<ProtoOADealListRes> _parser = new pb::MessageParser<ProtoOADealListRes>(() => new ProtoOADealListRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOADealListRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADealListRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADealListRes(ProtoOADealListRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    deal_ = other.deal_.Clone();
    hasMore_ = other.hasMore_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADealListRes Clone() {
    return new ProtoOADealListRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaDealListRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "deal" field.</summary>
  public const int DealFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOADeal> _repeated_deal_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOADeal.Parser);
  private readonly pbc::RepeatedField<global::ProtoOADeal> deal_ = new pbc::RepeatedField<global::ProtoOADeal>();
  /// <summary>
  /// The list of the deals.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOADeal> Deal {
    get { return deal_; }
  }

  /// <summary>Field number for the "hasMore" field.</summary>
  public const int HasMoreFieldNumber = 4;
  private readonly static bool HasMoreDefaultValue = false;

  private bool hasMore_;
  /// <summary>
  /// If TRUE then the response will provide more than 10000 deals.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMore {
    get { if ((_hasBits0 & 4) != 0) { return hasMore_; } else { return HasMoreDefaultValue; } }
    set {
      _hasBits0 |= 4;
      hasMore_ = value;
    }
  }
  /// <summary>Gets whether the "hasMore" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHasMore {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "hasMore" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHasMore() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOADealListRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOADealListRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!deal_.Equals(other.deal_)) return false;
    if (HasMore != other.HasMore) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= deal_.GetHashCode();
    if (HasHasMore) hash ^= HasMore.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    deal_.WriteTo(output, _repeated_deal_codec);
    if (HasHasMore) {
      output.WriteRawTag(32);
      output.WriteBool(HasMore);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += deal_.CalculateSize(_repeated_deal_codec);
    if (HasHasMore) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOADealListRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    deal_.Add(other.deal_);
    if (other.HasHasMore) {
      HasMore = other.HasMore;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          deal_.AddEntriesFrom(input, _repeated_deal_codec);
          break;
        }
        case 32: {
          HasMore = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting the margin estimate. Can be used before sending a new order request. 
/// </summary>
public sealed partial class ProtoOAExpectedMarginReq : pb::IMessage<ProtoOAExpectedMarginReq> {
  private static readonly pb::MessageParser<ProtoOAExpectedMarginReq> _parser = new pb::MessageParser<ProtoOAExpectedMarginReq>(() => new ProtoOAExpectedMarginReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAExpectedMarginReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExpectedMarginReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExpectedMarginReq(ProtoOAExpectedMarginReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_;
    volume_ = other.volume_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExpectedMarginReq Clone() {
    return new ProtoOAExpectedMarginReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaExpectedMarginReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 4) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 4;
  private static readonly pb::FieldCodec<long> _repeated_volume_codec
      = pb::FieldCodec.ForInt64(32);
  private readonly pbc::RepeatedField<long> volume_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// Volume represented in 0.01 of a unit (e.g. cents).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> Volume {
    get { return volume_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAExpectedMarginReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAExpectedMarginReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (SymbolId != other.SymbolId) return false;
    if(!volume_.Equals(other.volume_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    hash ^= volume_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      output.WriteRawTag(24);
      output.WriteInt64(SymbolId);
    }
    volume_.WriteTo(output, _repeated_volume_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    size += volume_.CalculateSize(_repeated_volume_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAExpectedMarginReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    volume_.Add(other.volume_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 34:
        case 32: {
          volume_.AddEntriesFrom(input, _repeated_volume_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*The response to the ProtoOAExpectedMarginReq request. 
/// </summary>
public sealed partial class ProtoOAExpectedMarginRes : pb::IMessage<ProtoOAExpectedMarginRes> {
  private static readonly pb::MessageParser<ProtoOAExpectedMarginRes> _parser = new pb::MessageParser<ProtoOAExpectedMarginRes>(() => new ProtoOAExpectedMarginRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAExpectedMarginRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExpectedMarginRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExpectedMarginRes(ProtoOAExpectedMarginRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    margin_ = other.margin_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAExpectedMarginRes Clone() {
    return new ProtoOAExpectedMarginRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaExpectedMarginRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "margin" field.</summary>
  public const int MarginFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOAExpectedMargin> _repeated_margin_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOAExpectedMargin.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAExpectedMargin> margin_ = new pbc::RepeatedField<global::ProtoOAExpectedMargin>();
  /// <summary>
  /// The buy and sell margin estimate.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOAExpectedMargin> Margin {
    get { return margin_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAExpectedMarginRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAExpectedMarginRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!margin_.Equals(other.margin_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= margin_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    margin_.WriteTo(output, _repeated_margin_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += margin_.CalculateSize(_repeated_margin_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAExpectedMarginRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    margin_.Add(other.margin_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          margin_.AddEntriesFrom(input, _repeated_margin_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when the margin allocated to a specific position is changed. 
/// </summary>
public sealed partial class ProtoOAMarginChangedEvent : pb::IMessage<ProtoOAMarginChangedEvent> {
  private static readonly pb::MessageParser<ProtoOAMarginChangedEvent> _parser = new pb::MessageParser<ProtoOAMarginChangedEvent>(() => new ProtoOAMarginChangedEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAMarginChangedEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginChangedEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginChangedEvent(ProtoOAMarginChangedEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    positionId_ = other.positionId_;
    usedMargin_ = other.usedMargin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginChangedEvent Clone() {
    return new ProtoOAMarginChangedEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaMarginChangedEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 3;
  private readonly static ulong PositionIdDefaultValue = 0UL;

  private ulong positionId_;
  /// <summary>
  /// The unique ID of the position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "usedMargin" field.</summary>
  public const int UsedMarginFieldNumber = 4;
  private readonly static ulong UsedMarginDefaultValue = 0UL;

  private ulong usedMargin_;
  /// <summary>
  /// The new value of the margin used.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong UsedMargin {
    get { if ((_hasBits0 & 8) != 0) { return usedMargin_; } else { return UsedMarginDefaultValue; } }
    set {
      _hasBits0 |= 8;
      usedMargin_ = value;
    }
  }
  /// <summary>Gets whether the "usedMargin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUsedMargin {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "usedMargin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUsedMargin() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginChangedEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAMarginChangedEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (PositionId != other.PositionId) return false;
    if (UsedMargin != other.UsedMargin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasUsedMargin) hash ^= UsedMargin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteUInt64(PositionId);
    }
    if (HasUsedMargin) {
      output.WriteRawTag(32);
      output.WriteUInt64(UsedMargin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PositionId);
    }
    if (HasUsedMargin) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UsedMargin);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAMarginChangedEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasUsedMargin) {
      UsedMargin = other.UsedMargin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadUInt64();
          break;
        }
        case 32: {
          UsedMargin = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting Trader's historical data of deposits and withdrawals. 
/// </summary>
public sealed partial class ProtoOACashFlowHistoryListReq : pb::IMessage<ProtoOACashFlowHistoryListReq> {
  private static readonly pb::MessageParser<ProtoOACashFlowHistoryListReq> _parser = new pb::MessageParser<ProtoOACashFlowHistoryListReq>(() => new ProtoOACashFlowHistoryListReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOACashFlowHistoryListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACashFlowHistoryListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACashFlowHistoryListReq(ProtoOACashFlowHistoryListReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    fromTimestamp_ = other.fromTimestamp_;
    toTimestamp_ = other.toTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACashFlowHistoryListReq Clone() {
    return new ProtoOACashFlowHistoryListReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaCashFlowHistoryListReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fromTimestamp" field.</summary>
  public const int FromTimestampFieldNumber = 3;
  private readonly static long FromTimestampDefaultValue = 0L;

  private long fromTimestamp_;
  /// <summary>
  /// The UNIX time from which the search starts >=0 (1-1-1970). Validation: toTimestamp - fromTimestamp &lt;= 604800000 (1 week).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FromTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return fromTimestamp_; } else { return FromTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fromTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "fromTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFromTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fromTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFromTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "toTimestamp" field.</summary>
  public const int ToTimestampFieldNumber = 4;
  private readonly static long ToTimestampDefaultValue = 0L;

  private long toTimestamp_;
  /// <summary>
  /// The UNIX time where to stop searching &lt;= 2147483646000 (19-1-2038).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ToTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return toTimestamp_; } else { return ToTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      toTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "toTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasToTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "toTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearToTimestamp() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOACashFlowHistoryListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOACashFlowHistoryListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (FromTimestamp != other.FromTimestamp) return false;
    if (ToTimestamp != other.ToTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasFromTimestamp) hash ^= FromTimestamp.GetHashCode();
    if (HasToTimestamp) hash ^= ToTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasFromTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(FromTimestamp);
    }
    if (HasToTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(ToTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasFromTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromTimestamp);
    }
    if (HasToTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOACashFlowHistoryListReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasFromTimestamp) {
      FromTimestamp = other.FromTimestamp;
    }
    if (other.HasToTimestamp) {
      ToTimestamp = other.ToTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          FromTimestamp = input.ReadInt64();
          break;
        }
        case 32: {
          ToTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOACashFlowHistoryListReq request. 
/// </summary>
public sealed partial class ProtoOACashFlowHistoryListRes : pb::IMessage<ProtoOACashFlowHistoryListRes> {
  private static readonly pb::MessageParser<ProtoOACashFlowHistoryListRes> _parser = new pb::MessageParser<ProtoOACashFlowHistoryListRes>(() => new ProtoOACashFlowHistoryListRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOACashFlowHistoryListRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACashFlowHistoryListRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACashFlowHistoryListRes(ProtoOACashFlowHistoryListRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    depositWithdraw_ = other.depositWithdraw_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOACashFlowHistoryListRes Clone() {
    return new ProtoOACashFlowHistoryListRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaCashFlowHistoryListRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "depositWithdraw" field.</summary>
  public const int DepositWithdrawFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOADepositWithdraw> _repeated_depositWithdraw_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOADepositWithdraw.Parser);
  private readonly pbc::RepeatedField<global::ProtoOADepositWithdraw> depositWithdraw_ = new pbc::RepeatedField<global::ProtoOADepositWithdraw>();
  /// <summary>
  /// The list of deposit and withdrawal operations.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOADepositWithdraw> DepositWithdraw {
    get { return depositWithdraw_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOACashFlowHistoryListRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOACashFlowHistoryListRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!depositWithdraw_.Equals(other.depositWithdraw_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= depositWithdraw_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    depositWithdraw_.WriteTo(output, _repeated_depositWithdraw_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += depositWithdraw_.CalculateSize(_repeated_depositWithdraw_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOACashFlowHistoryListRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    depositWithdraw_.Add(other.depositWithdraw_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          depositWithdraw_.AddEntriesFrom(input, _repeated_depositWithdraw_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting the list of granted trader's account for the access token. 
/// </summary>
public sealed partial class ProtoOAGetAccountListByAccessTokenReq : pb::IMessage<ProtoOAGetAccountListByAccessTokenReq> {
  private static readonly pb::MessageParser<ProtoOAGetAccountListByAccessTokenReq> _parser = new pb::MessageParser<ProtoOAGetAccountListByAccessTokenReq>(() => new ProtoOAGetAccountListByAccessTokenReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetAccountListByAccessTokenReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetAccountListByAccessTokenReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetAccountListByAccessTokenReq(ProtoOAGetAccountListByAccessTokenReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    accessToken_ = other.accessToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetAccountListByAccessTokenReq Clone() {
    return new ProtoOAGetAccountListByAccessTokenReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetAccountsByAccessTokenReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private readonly static string AccessTokenDefaultValue = "";

  private string accessToken_;
  /// <summary>
  /// The Access Token issued for providing access to the Trader's Account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_ ?? AccessTokenDefaultValue; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accessToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessToken {
    get { return accessToken_ != null; }
  }
  /// <summary>Clears the value of the "accessToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessToken() {
    accessToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetAccountListByAccessTokenReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetAccountListByAccessTokenReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (AccessToken != other.AccessToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasAccessToken) hash ^= AccessToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasAccessToken) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasAccessToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetAccountListByAccessTokenReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasAccessToken) {
      AccessToken = other.AccessToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAGetAccountListByAccessTokenReq request. 
/// </summary>
public sealed partial class ProtoOAGetAccountListByAccessTokenRes : pb::IMessage<ProtoOAGetAccountListByAccessTokenRes> {
  private static readonly pb::MessageParser<ProtoOAGetAccountListByAccessTokenRes> _parser = new pb::MessageParser<ProtoOAGetAccountListByAccessTokenRes>(() => new ProtoOAGetAccountListByAccessTokenRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetAccountListByAccessTokenRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetAccountListByAccessTokenRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetAccountListByAccessTokenRes(ProtoOAGetAccountListByAccessTokenRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    accessToken_ = other.accessToken_;
    permissionScope_ = other.permissionScope_;
    ctidTraderAccount_ = other.ctidTraderAccount_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetAccountListByAccessTokenRes Clone() {
    return new ProtoOAGetAccountListByAccessTokenRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetAccountsByAccessTokenRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private readonly static string AccessTokenDefaultValue = "";

  private string accessToken_;
  /// <summary>
  /// The Access Token issued for providing access to the Trader's Account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_ ?? AccessTokenDefaultValue; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accessToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessToken {
    get { return accessToken_ != null; }
  }
  /// <summary>Clears the value of the "accessToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessToken() {
    accessToken_ = null;
  }

  /// <summary>Field number for the "permissionScope" field.</summary>
  public const int PermissionScopeFieldNumber = 3;
  private readonly static global::ProtoOAClientPermissionScope PermissionScopeDefaultValue = global::ProtoOAClientPermissionScope.ScopeView;

  private global::ProtoOAClientPermissionScope permissionScope_;
  /// <summary>
  /// SCOPE_VIEW, SCOPE_TRADE.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAClientPermissionScope PermissionScope {
    get { if ((_hasBits0 & 2) != 0) { return permissionScope_; } else { return PermissionScopeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      permissionScope_ = value;
    }
  }
  /// <summary>Gets whether the "permissionScope" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPermissionScope {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "permissionScope" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPermissionScope() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ctidTraderAccount" field.</summary>
  public const int CtidTraderAccountFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ProtoOACtidTraderAccount> _repeated_ctidTraderAccount_codec
      = pb::FieldCodec.ForMessage(34, global::ProtoOACtidTraderAccount.Parser);
  private readonly pbc::RepeatedField<global::ProtoOACtidTraderAccount> ctidTraderAccount_ = new pbc::RepeatedField<global::ProtoOACtidTraderAccount>();
  /// <summary>
  /// The list of the accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOACtidTraderAccount> CtidTraderAccount {
    get { return ctidTraderAccount_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetAccountListByAccessTokenRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetAccountListByAccessTokenRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (AccessToken != other.AccessToken) return false;
    if (PermissionScope != other.PermissionScope) return false;
    if(!ctidTraderAccount_.Equals(other.ctidTraderAccount_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasAccessToken) hash ^= AccessToken.GetHashCode();
    if (HasPermissionScope) hash ^= PermissionScope.GetHashCode();
    hash ^= ctidTraderAccount_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasAccessToken) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (HasPermissionScope) {
      output.WriteRawTag(24);
      output.WriteEnum((int) PermissionScope);
    }
    ctidTraderAccount_.WriteTo(output, _repeated_ctidTraderAccount_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasAccessToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (HasPermissionScope) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PermissionScope);
    }
    size += ctidTraderAccount_.CalculateSize(_repeated_ctidTraderAccount_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetAccountListByAccessTokenRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasAccessToken) {
      AccessToken = other.AccessToken;
    }
    if (other.HasPermissionScope) {
      PermissionScope = other.PermissionScope;
    }
    ctidTraderAccount_.Add(other.ctidTraderAccount_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
        case 24: {
          PermissionScope = (global::ProtoOAClientPermissionScope) input.ReadEnum();
          break;
        }
        case 34: {
          ctidTraderAccount_.AddEntriesFrom(input, _repeated_ctidTraderAccount_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request to refresh the access token using refresh token of granted trader's account. 
/// </summary>
public sealed partial class ProtoOARefreshTokenReq : pb::IMessage<ProtoOARefreshTokenReq> {
  private static readonly pb::MessageParser<ProtoOARefreshTokenReq> _parser = new pb::MessageParser<ProtoOARefreshTokenReq>(() => new ProtoOARefreshTokenReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOARefreshTokenReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOARefreshTokenReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOARefreshTokenReq(ProtoOARefreshTokenReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    refreshToken_ = other.refreshToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOARefreshTokenReq Clone() {
    return new ProtoOARefreshTokenReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaRefreshTokenReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "refreshToken" field.</summary>
  public const int RefreshTokenFieldNumber = 2;
  private readonly static string RefreshTokenDefaultValue = "";

  private string refreshToken_;
  /// <summary>
  /// The Refresh Token issued for updating Access Token.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RefreshToken {
    get { return refreshToken_ ?? RefreshTokenDefaultValue; }
    set {
      refreshToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "refreshToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRefreshToken {
    get { return refreshToken_ != null; }
  }
  /// <summary>Clears the value of the "refreshToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRefreshToken() {
    refreshToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOARefreshTokenReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOARefreshTokenReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (RefreshToken != other.RefreshToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasRefreshToken) hash ^= RefreshToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasRefreshToken) {
      output.WriteRawTag(18);
      output.WriteString(RefreshToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasRefreshToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RefreshToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOARefreshTokenReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasRefreshToken) {
      RefreshToken = other.RefreshToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          RefreshToken = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOARefreshTokenReq request. 
/// </summary>
public sealed partial class ProtoOARefreshTokenRes : pb::IMessage<ProtoOARefreshTokenRes> {
  private static readonly pb::MessageParser<ProtoOARefreshTokenRes> _parser = new pb::MessageParser<ProtoOARefreshTokenRes>(() => new ProtoOARefreshTokenRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOARefreshTokenRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOARefreshTokenRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOARefreshTokenRes(ProtoOARefreshTokenRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    accessToken_ = other.accessToken_;
    tokenType_ = other.tokenType_;
    expiresIn_ = other.expiresIn_;
    refreshToken_ = other.refreshToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOARefreshTokenRes Clone() {
    return new ProtoOARefreshTokenRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaRefreshTokenRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private readonly static string AccessTokenDefaultValue = "";

  private string accessToken_;
  /// <summary>
  /// The Access Token issued for providing access to the Trader's Account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_ ?? AccessTokenDefaultValue; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accessToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessToken {
    get { return accessToken_ != null; }
  }
  /// <summary>Clears the value of the "accessToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessToken() {
    accessToken_ = null;
  }

  /// <summary>Field number for the "tokenType" field.</summary>
  public const int TokenTypeFieldNumber = 3;
  private readonly static string TokenTypeDefaultValue = "";

  private string tokenType_;
  /// <summary>
  /// bearer
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TokenType {
    get { return tokenType_ ?? TokenTypeDefaultValue; }
    set {
      tokenType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "tokenType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTokenType {
    get { return tokenType_ != null; }
  }
  /// <summary>Clears the value of the "tokenType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTokenType() {
    tokenType_ = null;
  }

  /// <summary>Field number for the "expiresIn" field.</summary>
  public const int ExpiresInFieldNumber = 4;
  private readonly static long ExpiresInDefaultValue = 0L;

  private long expiresIn_;
  /// <summary>
  /// Access Token expiration in seconds
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpiresIn {
    get { if ((_hasBits0 & 2) != 0) { return expiresIn_; } else { return ExpiresInDefaultValue; } }
    set {
      _hasBits0 |= 2;
      expiresIn_ = value;
    }
  }
  /// <summary>Gets whether the "expiresIn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExpiresIn {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "expiresIn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExpiresIn() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "refreshToken" field.</summary>
  public const int RefreshTokenFieldNumber = 5;
  private readonly static string RefreshTokenDefaultValue = "";

  private string refreshToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RefreshToken {
    get { return refreshToken_ ?? RefreshTokenDefaultValue; }
    set {
      refreshToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "refreshToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRefreshToken {
    get { return refreshToken_ != null; }
  }
  /// <summary>Clears the value of the "refreshToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRefreshToken() {
    refreshToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOARefreshTokenRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOARefreshTokenRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (AccessToken != other.AccessToken) return false;
    if (TokenType != other.TokenType) return false;
    if (ExpiresIn != other.ExpiresIn) return false;
    if (RefreshToken != other.RefreshToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasAccessToken) hash ^= AccessToken.GetHashCode();
    if (HasTokenType) hash ^= TokenType.GetHashCode();
    if (HasExpiresIn) hash ^= ExpiresIn.GetHashCode();
    if (HasRefreshToken) hash ^= RefreshToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasAccessToken) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (HasTokenType) {
      output.WriteRawTag(26);
      output.WriteString(TokenType);
    }
    if (HasExpiresIn) {
      output.WriteRawTag(32);
      output.WriteInt64(ExpiresIn);
    }
    if (HasRefreshToken) {
      output.WriteRawTag(42);
      output.WriteString(RefreshToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasAccessToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (HasTokenType) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenType);
    }
    if (HasExpiresIn) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresIn);
    }
    if (HasRefreshToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RefreshToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOARefreshTokenRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasAccessToken) {
      AccessToken = other.AccessToken;
    }
    if (other.HasTokenType) {
      TokenType = other.TokenType;
    }
    if (other.HasExpiresIn) {
      ExpiresIn = other.ExpiresIn;
    }
    if (other.HasRefreshToken) {
      RefreshToken = other.RefreshToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
        case 26: {
          TokenType = input.ReadString();
          break;
        }
        case 32: {
          ExpiresIn = input.ReadInt64();
          break;
        }
        case 42: {
          RefreshToken = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for subscribing on spot events of the specified symbol. 
/// </summary>
public sealed partial class ProtoOASubscribeSpotsReq : pb::IMessage<ProtoOASubscribeSpotsReq> {
  private static readonly pb::MessageParser<ProtoOASubscribeSpotsReq> _parser = new pb::MessageParser<ProtoOASubscribeSpotsReq>(() => new ProtoOASubscribeSpotsReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASubscribeSpotsReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeSpotsReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeSpotsReq(ProtoOASubscribeSpotsReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeSpotsReq Clone() {
    return new ProtoOASubscribeSpotsReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSubscribeSpotsReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_symbolId_codec
      = pb::FieldCodec.ForInt64(24);
  private readonly pbc::RepeatedField<long> symbolId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SymbolId {
    get { return symbolId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASubscribeSpotsReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASubscribeSpotsReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbolId_.Equals(other.symbolId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbolId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbolId_.WriteTo(output, _repeated_symbolId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbolId_.CalculateSize(_repeated_symbolId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASubscribeSpotsReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbolId_.Add(other.symbolId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          symbolId_.AddEntriesFrom(input, _repeated_symbolId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASubscribeSpotsReq request. 
/// </summary>
public sealed partial class ProtoOASubscribeSpotsRes : pb::IMessage<ProtoOASubscribeSpotsRes> {
  private static readonly pb::MessageParser<ProtoOASubscribeSpotsRes> _parser = new pb::MessageParser<ProtoOASubscribeSpotsRes>(() => new ProtoOASubscribeSpotsRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASubscribeSpotsRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeSpotsRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeSpotsRes(ProtoOASubscribeSpotsRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeSpotsRes Clone() {
    return new ProtoOASubscribeSpotsRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSubscribeSpotsRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASubscribeSpotsRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASubscribeSpotsRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASubscribeSpotsRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for unsubscribing from the spot events of the specified symbol. 
/// </summary>
public sealed partial class ProtoOAUnsubscribeSpotsReq : pb::IMessage<ProtoOAUnsubscribeSpotsReq> {
  private static readonly pb::MessageParser<ProtoOAUnsubscribeSpotsReq> _parser = new pb::MessageParser<ProtoOAUnsubscribeSpotsReq>(() => new ProtoOAUnsubscribeSpotsReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAUnsubscribeSpotsReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeSpotsReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeSpotsReq(ProtoOAUnsubscribeSpotsReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeSpotsReq Clone() {
    return new ProtoOAUnsubscribeSpotsReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaUnsubscribeSpotsReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_symbolId_codec
      = pb::FieldCodec.ForInt64(24);
  private readonly pbc::RepeatedField<long> symbolId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SymbolId {
    get { return symbolId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAUnsubscribeSpotsReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAUnsubscribeSpotsReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbolId_.Equals(other.symbolId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbolId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbolId_.WriteTo(output, _repeated_symbolId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbolId_.CalculateSize(_repeated_symbolId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAUnsubscribeSpotsReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbolId_.Add(other.symbolId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          symbolId_.AddEntriesFrom(input, _repeated_symbolId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASubscribeSpotsRes request. 
/// </summary>
public sealed partial class ProtoOAUnsubscribeSpotsRes : pb::IMessage<ProtoOAUnsubscribeSpotsRes> {
  private static readonly pb::MessageParser<ProtoOAUnsubscribeSpotsRes> _parser = new pb::MessageParser<ProtoOAUnsubscribeSpotsRes>(() => new ProtoOAUnsubscribeSpotsRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAUnsubscribeSpotsRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeSpotsRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeSpotsRes(ProtoOAUnsubscribeSpotsRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeSpotsRes Clone() {
    return new ProtoOAUnsubscribeSpotsRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaUnsubscribeSpotsRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAUnsubscribeSpotsRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAUnsubscribeSpotsRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAUnsubscribeSpotsRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when a new spot event is generated on the server side. Requires subscription on the spot events, see ProtoOASubscribeSpotsReq. 
/// </summary>
public sealed partial class ProtoOASpotEvent : pb::IMessage<ProtoOASpotEvent> {
  private static readonly pb::MessageParser<ProtoOASpotEvent> _parser = new pb::MessageParser<ProtoOASpotEvent>(() => new ProtoOASpotEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASpotEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASpotEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASpotEvent(ProtoOASpotEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_;
    bid_ = other.bid_;
    ask_ = other.ask_;
    trendbar_ = other.trendbar_.Clone();
    sessionClose_ = other.sessionClose_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASpotEvent Clone() {
    return new ProtoOASpotEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSpotEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 4) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "bid" field.</summary>
  public const int BidFieldNumber = 4;
  private readonly static ulong BidDefaultValue = 0UL;

  private ulong bid_;
  /// <summary>
  /// Bid price. Specified in 1/100_000 of unit of a price. (e.g. 1.23 -> 123_000)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Bid {
    get { if ((_hasBits0 & 8) != 0) { return bid_; } else { return BidDefaultValue; } }
    set {
      _hasBits0 |= 8;
      bid_ = value;
    }
  }
  /// <summary>Gets whether the "bid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBid {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "bid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBid() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ask" field.</summary>
  public const int AskFieldNumber = 5;
  private readonly static ulong AskDefaultValue = 0UL;

  private ulong ask_;
  /// <summary>
  /// Ask price. Specified in 1/100_000 of unit of a price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Ask {
    get { if ((_hasBits0 & 16) != 0) { return ask_; } else { return AskDefaultValue; } }
    set {
      _hasBits0 |= 16;
      ask_ = value;
    }
  }
  /// <summary>Gets whether the "ask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAsk {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAsk() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "trendbar" field.</summary>
  public const int TrendbarFieldNumber = 6;
  private static readonly pb::FieldCodec<global::ProtoOATrendbar> _repeated_trendbar_codec
      = pb::FieldCodec.ForMessage(50, global::ProtoOATrendbar.Parser);
  private readonly pbc::RepeatedField<global::ProtoOATrendbar> trendbar_ = new pbc::RepeatedField<global::ProtoOATrendbar>();
  /// <summary>
  /// Returns live trend bar. Requires subscription on the trend bars.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOATrendbar> Trendbar {
    get { return trendbar_; }
  }

  /// <summary>Field number for the "sessionClose" field.</summary>
  public const int SessionCloseFieldNumber = 7;
  private readonly static ulong SessionCloseDefaultValue = 0UL;

  private ulong sessionClose_;
  /// <summary>
  ///Last session close. Specified in 1/100_000 of unit of a price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SessionClose {
    get { if ((_hasBits0 & 32) != 0) { return sessionClose_; } else { return SessionCloseDefaultValue; } }
    set {
      _hasBits0 |= 32;
      sessionClose_ = value;
    }
  }
  /// <summary>Gets whether the "sessionClose" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSessionClose {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "sessionClose" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSessionClose() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASpotEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASpotEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (SymbolId != other.SymbolId) return false;
    if (Bid != other.Bid) return false;
    if (Ask != other.Ask) return false;
    if(!trendbar_.Equals(other.trendbar_)) return false;
    if (SessionClose != other.SessionClose) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasBid) hash ^= Bid.GetHashCode();
    if (HasAsk) hash ^= Ask.GetHashCode();
    hash ^= trendbar_.GetHashCode();
    if (HasSessionClose) hash ^= SessionClose.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      output.WriteRawTag(24);
      output.WriteInt64(SymbolId);
    }
    if (HasBid) {
      output.WriteRawTag(32);
      output.WriteUInt64(Bid);
    }
    if (HasAsk) {
      output.WriteRawTag(40);
      output.WriteUInt64(Ask);
    }
    trendbar_.WriteTo(output, _repeated_trendbar_codec);
    if (HasSessionClose) {
      output.WriteRawTag(56);
      output.WriteUInt64(SessionClose);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasBid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bid);
    }
    if (HasAsk) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ask);
    }
    size += trendbar_.CalculateSize(_repeated_trendbar_codec);
    if (HasSessionClose) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionClose);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASpotEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasBid) {
      Bid = other.Bid;
    }
    if (other.HasAsk) {
      Ask = other.Ask;
    }
    trendbar_.Add(other.trendbar_);
    if (other.HasSessionClose) {
      SessionClose = other.SessionClose;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 32: {
          Bid = input.ReadUInt64();
          break;
        }
        case 40: {
          Ask = input.ReadUInt64();
          break;
        }
        case 50: {
          trendbar_.AddEntriesFrom(input, _repeated_trendbar_codec);
          break;
        }
        case 56: {
          SessionClose = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for subscribing for live trend bars. Requires subscription on the spot events, see ProtoOASubscribeSpotsReq. 
/// </summary>
public sealed partial class ProtoOASubscribeLiveTrendbarReq : pb::IMessage<ProtoOASubscribeLiveTrendbarReq> {
  private static readonly pb::MessageParser<ProtoOASubscribeLiveTrendbarReq> _parser = new pb::MessageParser<ProtoOASubscribeLiveTrendbarReq>(() => new ProtoOASubscribeLiveTrendbarReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASubscribeLiveTrendbarReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeLiveTrendbarReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeLiveTrendbarReq(ProtoOASubscribeLiveTrendbarReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    period_ = other.period_;
    symbolId_ = other.symbolId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeLiveTrendbarReq Clone() {
    return new ProtoOASubscribeLiveTrendbarReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSubscribeLiveTrendbarReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "period" field.</summary>
  public const int PeriodFieldNumber = 3;
  private readonly static global::ProtoOATrendbarPeriod PeriodDefaultValue = global::ProtoOATrendbarPeriod.M1;

  private global::ProtoOATrendbarPeriod period_;
  /// <summary>
  /// Specifies period of trend bar series (e.g. M1, M10, etc.).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATrendbarPeriod Period {
    get { if ((_hasBits0 & 4) != 0) { return period_; } else { return PeriodDefaultValue; } }
    set {
      _hasBits0 |= 4;
      period_ = value;
    }
  }
  /// <summary>Gets whether the "period" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPeriod {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "period" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPeriod() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 4;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 8) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASubscribeLiveTrendbarReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASubscribeLiveTrendbarReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (Period != other.Period) return false;
    if (SymbolId != other.SymbolId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasPeriod) hash ^= Period.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPeriod) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Period);
    }
    if (HasSymbolId) {
      output.WriteRawTag(32);
      output.WriteInt64(SymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasPeriod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASubscribeLiveTrendbarReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasPeriod) {
      Period = other.Period;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          Period = (global::ProtoOATrendbarPeriod) input.ReadEnum();
          break;
        }
        case 32: {
          SymbolId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASubscribeLiveTrendbarReq request. 
/// </summary>
public sealed partial class ProtoOASubscribeLiveTrendbarRes : pb::IMessage<ProtoOASubscribeLiveTrendbarRes> {
  private static readonly pb::MessageParser<ProtoOASubscribeLiveTrendbarRes> _parser = new pb::MessageParser<ProtoOASubscribeLiveTrendbarRes>(() => new ProtoOASubscribeLiveTrendbarRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASubscribeLiveTrendbarRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeLiveTrendbarRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeLiveTrendbarRes(ProtoOASubscribeLiveTrendbarRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeLiveTrendbarRes Clone() {
    return new ProtoOASubscribeLiveTrendbarRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSubscribeLiveTrendbarRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASubscribeLiveTrendbarRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASubscribeLiveTrendbarRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASubscribeLiveTrendbarRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for unsubscribing from the live trend bars. 
/// </summary>
public sealed partial class ProtoOAUnsubscribeLiveTrendbarReq : pb::IMessage<ProtoOAUnsubscribeLiveTrendbarReq> {
  private static readonly pb::MessageParser<ProtoOAUnsubscribeLiveTrendbarReq> _parser = new pb::MessageParser<ProtoOAUnsubscribeLiveTrendbarReq>(() => new ProtoOAUnsubscribeLiveTrendbarReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAUnsubscribeLiveTrendbarReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeLiveTrendbarReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeLiveTrendbarReq(ProtoOAUnsubscribeLiveTrendbarReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    period_ = other.period_;
    symbolId_ = other.symbolId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeLiveTrendbarReq Clone() {
    return new ProtoOAUnsubscribeLiveTrendbarReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaUnsubscribeLiveTrendbarReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "period" field.</summary>
  public const int PeriodFieldNumber = 3;
  private readonly static global::ProtoOATrendbarPeriod PeriodDefaultValue = global::ProtoOATrendbarPeriod.M1;

  private global::ProtoOATrendbarPeriod period_;
  /// <summary>
  /// Specifies period of trend bar series (e.g. M1, M10, etc.).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATrendbarPeriod Period {
    get { if ((_hasBits0 & 4) != 0) { return period_; } else { return PeriodDefaultValue; } }
    set {
      _hasBits0 |= 4;
      period_ = value;
    }
  }
  /// <summary>Gets whether the "period" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPeriod {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "period" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPeriod() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 4;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 8) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAUnsubscribeLiveTrendbarReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAUnsubscribeLiveTrendbarReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (Period != other.Period) return false;
    if (SymbolId != other.SymbolId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasPeriod) hash ^= Period.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPeriod) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Period);
    }
    if (HasSymbolId) {
      output.WriteRawTag(32);
      output.WriteInt64(SymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasPeriod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAUnsubscribeLiveTrendbarReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasPeriod) {
      Period = other.Period;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          Period = (global::ProtoOATrendbarPeriod) input.ReadEnum();
          break;
        }
        case 32: {
          SymbolId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASubscribeLiveTrendbarReq request. 
/// </summary>
public sealed partial class ProtoOAUnsubscribeLiveTrendbarRes : pb::IMessage<ProtoOAUnsubscribeLiveTrendbarRes> {
  private static readonly pb::MessageParser<ProtoOAUnsubscribeLiveTrendbarRes> _parser = new pb::MessageParser<ProtoOAUnsubscribeLiveTrendbarRes>(() => new ProtoOAUnsubscribeLiveTrendbarRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAUnsubscribeLiveTrendbarRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeLiveTrendbarRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeLiveTrendbarRes(ProtoOAUnsubscribeLiveTrendbarRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeLiveTrendbarRes Clone() {
    return new ProtoOAUnsubscribeLiveTrendbarRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaUnsubscribeLiveTrendbarRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAUnsubscribeLiveTrendbarRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAUnsubscribeLiveTrendbarRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAUnsubscribeLiveTrendbarRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting historical trend bars for the symbol. 
/// </summary>
public sealed partial class ProtoOAGetTrendbarsReq : pb::IMessage<ProtoOAGetTrendbarsReq> {
  private static readonly pb::MessageParser<ProtoOAGetTrendbarsReq> _parser = new pb::MessageParser<ProtoOAGetTrendbarsReq>(() => new ProtoOAGetTrendbarsReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetTrendbarsReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTrendbarsReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTrendbarsReq(ProtoOAGetTrendbarsReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    fromTimestamp_ = other.fromTimestamp_;
    toTimestamp_ = other.toTimestamp_;
    period_ = other.period_;
    symbolId_ = other.symbolId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTrendbarsReq Clone() {
    return new ProtoOAGetTrendbarsReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetTrendbarsReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fromTimestamp" field.</summary>
  public const int FromTimestampFieldNumber = 3;
  private readonly static long FromTimestampDefaultValue = 0L;

  private long fromTimestamp_;
  /// <summary>
  /// The exact time of starting the search in milliseconds. Must be bigger or equal to zero (1-1-1970). Validation: toTimestamp - fromTimestamp &lt;= X, where X depends on series period: M1, M2, M3, M4, M5: 302400000 (5 weeks); M10, M15, M30, H1: 21168000000 (35 weeks), H4, H12, D1: 31622400000 (1 year); W1, MN1: 158112000000 (5 years).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FromTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return fromTimestamp_; } else { return FromTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fromTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "fromTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFromTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fromTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFromTimestamp() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "toTimestamp" field.</summary>
  public const int ToTimestampFieldNumber = 4;
  private readonly static long ToTimestampDefaultValue = 0L;

  private long toTimestamp_;
  /// <summary>
  /// The exact time of finishing the search in milliseconds. Smaller or equal to 2147483646000 (19-1-2038).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ToTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return toTimestamp_; } else { return ToTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      toTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "toTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasToTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "toTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearToTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "period" field.</summary>
  public const int PeriodFieldNumber = 5;
  private readonly static global::ProtoOATrendbarPeriod PeriodDefaultValue = global::ProtoOATrendbarPeriod.M1;

  private global::ProtoOATrendbarPeriod period_;
  /// <summary>
  /// Specifies period of trend bar series (e.g. M1, M10, etc.).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATrendbarPeriod Period {
    get { if ((_hasBits0 & 16) != 0) { return period_; } else { return PeriodDefaultValue; } }
    set {
      _hasBits0 |= 16;
      period_ = value;
    }
  }
  /// <summary>Gets whether the "period" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPeriod {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "period" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPeriod() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 6;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 32) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetTrendbarsReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetTrendbarsReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (FromTimestamp != other.FromTimestamp) return false;
    if (ToTimestamp != other.ToTimestamp) return false;
    if (Period != other.Period) return false;
    if (SymbolId != other.SymbolId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasFromTimestamp) hash ^= FromTimestamp.GetHashCode();
    if (HasToTimestamp) hash ^= ToTimestamp.GetHashCode();
    if (HasPeriod) hash ^= Period.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasFromTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(FromTimestamp);
    }
    if (HasToTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(ToTimestamp);
    }
    if (HasPeriod) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Period);
    }
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasFromTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromTimestamp);
    }
    if (HasToTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToTimestamp);
    }
    if (HasPeriod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetTrendbarsReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasFromTimestamp) {
      FromTimestamp = other.FromTimestamp;
    }
    if (other.HasToTimestamp) {
      ToTimestamp = other.ToTimestamp;
    }
    if (other.HasPeriod) {
      Period = other.Period;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          FromTimestamp = input.ReadInt64();
          break;
        }
        case 32: {
          ToTimestamp = input.ReadInt64();
          break;
        }
        case 40: {
          Period = (global::ProtoOATrendbarPeriod) input.ReadEnum();
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAGetTrendbarsReq request. 
/// </summary>
public sealed partial class ProtoOAGetTrendbarsRes : pb::IMessage<ProtoOAGetTrendbarsRes> {
  private static readonly pb::MessageParser<ProtoOAGetTrendbarsRes> _parser = new pb::MessageParser<ProtoOAGetTrendbarsRes>(() => new ProtoOAGetTrendbarsRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetTrendbarsRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTrendbarsRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTrendbarsRes(ProtoOAGetTrendbarsRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    period_ = other.period_;
    timestamp_ = other.timestamp_;
    trendbar_ = other.trendbar_.Clone();
    symbolId_ = other.symbolId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTrendbarsRes Clone() {
    return new ProtoOAGetTrendbarsRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetTrendbarsRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "period" field.</summary>
  public const int PeriodFieldNumber = 3;
  private readonly static global::ProtoOATrendbarPeriod PeriodDefaultValue = global::ProtoOATrendbarPeriod.M1;

  private global::ProtoOATrendbarPeriod period_;
  /// <summary>
  /// Specifies period of trend bar series (e.g. M1, M10, etc.).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOATrendbarPeriod Period {
    get { if ((_hasBits0 & 4) != 0) { return period_; } else { return PeriodDefaultValue; } }
    set {
      _hasBits0 |= 4;
      period_ = value;
    }
  }
  /// <summary>Gets whether the "period" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPeriod {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "period" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPeriod() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 4;
  private readonly static long TimestampDefaultValue = 0L;

  private long timestamp_;
  /// <summary>
  /// Equals to toTimestamp from the request.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Timestamp {
    get { if ((_hasBits0 & 8) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "trendbar" field.</summary>
  public const int TrendbarFieldNumber = 5;
  private static readonly pb::FieldCodec<global::ProtoOATrendbar> _repeated_trendbar_codec
      = pb::FieldCodec.ForMessage(42, global::ProtoOATrendbar.Parser);
  private readonly pbc::RepeatedField<global::ProtoOATrendbar> trendbar_ = new pbc::RepeatedField<global::ProtoOATrendbar>();
  /// <summary>
  /// The list of trend bars.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOATrendbar> Trendbar {
    get { return trendbar_; }
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 6;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 16) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetTrendbarsRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetTrendbarsRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (Period != other.Period) return false;
    if (Timestamp != other.Timestamp) return false;
    if(!trendbar_.Equals(other.trendbar_)) return false;
    if (SymbolId != other.SymbolId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasPeriod) hash ^= Period.GetHashCode();
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    hash ^= trendbar_.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasPeriod) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Period);
    }
    if (HasTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(Timestamp);
    }
    trendbar_.WriteTo(output, _repeated_trendbar_codec);
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasPeriod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
    }
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    size += trendbar_.CalculateSize(_repeated_trendbar_codec);
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetTrendbarsRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasPeriod) {
      Period = other.Period;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    trendbar_.Add(other.trendbar_);
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          Period = (global::ProtoOATrendbarPeriod) input.ReadEnum();
          break;
        }
        case 32: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 42: {
          trendbar_.AddEntriesFrom(input, _repeated_trendbar_codec);
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting historical tick data for the symbol. 
/// </summary>
public sealed partial class ProtoOAGetTickDataReq : pb::IMessage<ProtoOAGetTickDataReq> {
  private static readonly pb::MessageParser<ProtoOAGetTickDataReq> _parser = new pb::MessageParser<ProtoOAGetTickDataReq>(() => new ProtoOAGetTickDataReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetTickDataReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTickDataReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTickDataReq(ProtoOAGetTickDataReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_;
    type_ = other.type_;
    fromTimestamp_ = other.fromTimestamp_;
    toTimestamp_ = other.toTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTickDataReq Clone() {
    return new ProtoOAGetTickDataReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetTickdataReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SymbolId {
    get { if ((_hasBits0 & 4) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private readonly static global::ProtoOAQuoteType TypeDefaultValue = global::ProtoOAQuoteType.Bid;

  private global::ProtoOAQuoteType type_;
  /// <summary>
  /// Bid/Ask (1/2).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAQuoteType Type {
    get { if ((_hasBits0 & 8) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasType {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "fromTimestamp" field.</summary>
  public const int FromTimestampFieldNumber = 5;
  private readonly static long FromTimestampDefaultValue = 0L;

  private long fromTimestamp_;
  /// <summary>
  /// The exact time of starting the search in milliseconds. Must be bigger of equal to zero (1-1-1970). Validation: toTimestamp - fromTimestamp &lt;= 604800000 (1 week).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FromTimestamp {
    get { if ((_hasBits0 & 16) != 0) { return fromTimestamp_; } else { return FromTimestampDefaultValue; } }
    set {
      _hasBits0 |= 16;
      fromTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "fromTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFromTimestamp {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "fromTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFromTimestamp() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "toTimestamp" field.</summary>
  public const int ToTimestampFieldNumber = 6;
  private readonly static long ToTimestampDefaultValue = 0L;

  private long toTimestamp_;
  /// <summary>
  /// The exact time of finishing the search in milliseconds &lt;= 2147483646000 (19-1-2038).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ToTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return toTimestamp_; } else { return ToTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      toTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "toTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasToTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "toTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearToTimestamp() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetTickDataReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetTickDataReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (SymbolId != other.SymbolId) return false;
    if (Type != other.Type) return false;
    if (FromTimestamp != other.FromTimestamp) return false;
    if (ToTimestamp != other.ToTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasFromTimestamp) hash ^= FromTimestamp.GetHashCode();
    if (HasToTimestamp) hash ^= ToTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      output.WriteRawTag(24);
      output.WriteInt64(SymbolId);
    }
    if (HasType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
    if (HasFromTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(FromTimestamp);
    }
    if (HasToTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(ToTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasFromTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromTimestamp);
    }
    if (HasToTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetTickDataReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasFromTimestamp) {
      FromTimestamp = other.FromTimestamp;
    }
    if (other.HasToTimestamp) {
      ToTimestamp = other.ToTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 32: {
          Type = (global::ProtoOAQuoteType) input.ReadEnum();
          break;
        }
        case 40: {
          FromTimestamp = input.ReadInt64();
          break;
        }
        case 48: {
          ToTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAGetTickDataReq request. 
/// </summary>
public sealed partial class ProtoOAGetTickDataRes : pb::IMessage<ProtoOAGetTickDataRes> {
  private static readonly pb::MessageParser<ProtoOAGetTickDataRes> _parser = new pb::MessageParser<ProtoOAGetTickDataRes>(() => new ProtoOAGetTickDataRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetTickDataRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTickDataRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTickDataRes(ProtoOAGetTickDataRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    tickData_ = other.tickData_.Clone();
    hasMore_ = other.hasMore_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetTickDataRes Clone() {
    return new ProtoOAGetTickDataRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetTickdataRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "tickData" field.</summary>
  public const int TickDataFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOATickData> _repeated_tickData_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOATickData.Parser);
  private readonly pbc::RepeatedField<global::ProtoOATickData> tickData_ = new pbc::RepeatedField<global::ProtoOATickData>();
  /// <summary>
  /// The list of ticks.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOATickData> TickData {
    get { return tickData_; }
  }

  /// <summary>Field number for the "hasMore" field.</summary>
  public const int HasMoreFieldNumber = 4;
  private readonly static bool HasMoreDefaultValue = false;

  private bool hasMore_;
  /// <summary>
  /// If TRUE then the number of records by filter is larger than chunkSize, the response contains the number of records that is equal to chunkSize.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMore {
    get { if ((_hasBits0 & 4) != 0) { return hasMore_; } else { return HasMoreDefaultValue; } }
    set {
      _hasBits0 |= 4;
      hasMore_ = value;
    }
  }
  /// <summary>Gets whether the "hasMore" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHasMore {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "hasMore" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHasMore() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetTickDataRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetTickDataRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!tickData_.Equals(other.tickData_)) return false;
    if (HasMore != other.HasMore) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= tickData_.GetHashCode();
    if (HasHasMore) hash ^= HasMore.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    tickData_.WriteTo(output, _repeated_tickData_codec);
    if (HasHasMore) {
      output.WriteRawTag(32);
      output.WriteBool(HasMore);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += tickData_.CalculateSize(_repeated_tickData_codec);
    if (HasHasMore) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetTickDataRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    tickData_.Add(other.tickData_);
    if (other.HasHasMore) {
      HasMore = other.HasMore;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          tickData_.AddEntriesFrom(input, _repeated_tickData_codec);
          break;
        }
        case 32: {
          HasMore = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for getting details of Trader's profile. Limited due to GDRP requirements. 
/// </summary>
public sealed partial class ProtoOAGetCtidProfileByTokenReq : pb::IMessage<ProtoOAGetCtidProfileByTokenReq> {
  private static readonly pb::MessageParser<ProtoOAGetCtidProfileByTokenReq> _parser = new pb::MessageParser<ProtoOAGetCtidProfileByTokenReq>(() => new ProtoOAGetCtidProfileByTokenReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetCtidProfileByTokenReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetCtidProfileByTokenReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetCtidProfileByTokenReq(ProtoOAGetCtidProfileByTokenReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    accessToken_ = other.accessToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetCtidProfileByTokenReq Clone() {
    return new ProtoOAGetCtidProfileByTokenReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetCtidProfileByTokenReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private readonly static string AccessTokenDefaultValue = "";

  private string accessToken_;
  /// <summary>
  /// The Access Token issued for providing access to the Trader's Account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_ ?? AccessTokenDefaultValue; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accessToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccessToken {
    get { return accessToken_ != null; }
  }
  /// <summary>Clears the value of the "accessToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccessToken() {
    accessToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetCtidProfileByTokenReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetCtidProfileByTokenReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (AccessToken != other.AccessToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasAccessToken) hash ^= AccessToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasAccessToken) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasAccessToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetCtidProfileByTokenReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasAccessToken) {
      AccessToken = other.AccessToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAGetCtidProfileByTokenReq request. 
/// </summary>
public sealed partial class ProtoOAGetCtidProfileByTokenRes : pb::IMessage<ProtoOAGetCtidProfileByTokenRes> {
  private static readonly pb::MessageParser<ProtoOAGetCtidProfileByTokenRes> _parser = new pb::MessageParser<ProtoOAGetCtidProfileByTokenRes>(() => new ProtoOAGetCtidProfileByTokenRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAGetCtidProfileByTokenRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetCtidProfileByTokenRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetCtidProfileByTokenRes(ProtoOAGetCtidProfileByTokenRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    profile_ = other.profile_ != null ? other.profile_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAGetCtidProfileByTokenRes Clone() {
    return new ProtoOAGetCtidProfileByTokenRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaGetCtidProfileByTokenRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 2;
  private global::ProtoOACtidProfile profile_;
  /// <summary>
  /// Trader's profile.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOACtidProfile Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAGetCtidProfileByTokenRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAGetCtidProfileByTokenRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (!object.Equals(Profile, other.Profile)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (profile_ != null) hash ^= Profile.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (profile_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Profile);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (profile_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAGetCtidProfileByTokenRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.profile_ != null) {
      if (profile_ == null) {
        Profile = new global::ProtoOACtidProfile();
      }
      Profile.MergeFrom(other.Profile);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          if (profile_ == null) {
            Profile = new global::ProtoOACtidProfile();
          }
          input.ReadMessage(Profile);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when the structure of depth of market is changed. Requires subscription on the depth of markets for the symbol, see ProtoOASubscribeDepthQuotesReq. 
/// </summary>
public sealed partial class ProtoOADepthEvent : pb::IMessage<ProtoOADepthEvent> {
  private static readonly pb::MessageParser<ProtoOADepthEvent> _parser = new pb::MessageParser<ProtoOADepthEvent>(() => new ProtoOADepthEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOADepthEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADepthEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADepthEvent(ProtoOADepthEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_;
    newQuotes_ = other.newQuotes_.Clone();
    deletedQuotes_ = other.deletedQuotes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOADepthEvent Clone() {
    return new ProtoOADepthEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaDepthEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private readonly static ulong SymbolIdDefaultValue = 0UL;

  private ulong symbolId_;
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SymbolId {
    get { if ((_hasBits0 & 4) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSymbolId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSymbolId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "newQuotes" field.</summary>
  public const int NewQuotesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ProtoOADepthQuote> _repeated_newQuotes_codec
      = pb::FieldCodec.ForMessage(34, global::ProtoOADepthQuote.Parser);
  private readonly pbc::RepeatedField<global::ProtoOADepthQuote> newQuotes_ = new pbc::RepeatedField<global::ProtoOADepthQuote>();
  /// <summary>
  /// The list of changes in the depth of market quotes.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOADepthQuote> NewQuotes {
    get { return newQuotes_; }
  }

  /// <summary>Field number for the "deletedQuotes" field.</summary>
  public const int DeletedQuotesFieldNumber = 5;
  private static readonly pb::FieldCodec<ulong> _repeated_deletedQuotes_codec
      = pb::FieldCodec.ForUInt64(42);
  private readonly pbc::RepeatedField<ulong> deletedQuotes_ = new pbc::RepeatedField<ulong>();
  /// <summary>
  /// The list of quotes to delete.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> DeletedQuotes {
    get { return deletedQuotes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOADepthEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOADepthEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (SymbolId != other.SymbolId) return false;
    if(!newQuotes_.Equals(other.newQuotes_)) return false;
    if(!deletedQuotes_.Equals(other.deletedQuotes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    hash ^= newQuotes_.GetHashCode();
    hash ^= deletedQuotes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      output.WriteRawTag(24);
      output.WriteUInt64(SymbolId);
    }
    newQuotes_.WriteTo(output, _repeated_newQuotes_codec);
    deletedQuotes_.WriteTo(output, _repeated_deletedQuotes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SymbolId);
    }
    size += newQuotes_.CalculateSize(_repeated_newQuotes_codec);
    size += deletedQuotes_.CalculateSize(_repeated_deletedQuotes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOADepthEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    newQuotes_.Add(other.newQuotes_);
    deletedQuotes_.Add(other.deletedQuotes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 24: {
          SymbolId = input.ReadUInt64();
          break;
        }
        case 34: {
          newQuotes_.AddEntriesFrom(input, _repeated_newQuotes_codec);
          break;
        }
        case 42:
        case 40: {
          deletedQuotes_.AddEntriesFrom(input, _repeated_deletedQuotes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for subscribing on depth of market of the specified symbol. 
/// </summary>
public sealed partial class ProtoOASubscribeDepthQuotesReq : pb::IMessage<ProtoOASubscribeDepthQuotesReq> {
  private static readonly pb::MessageParser<ProtoOASubscribeDepthQuotesReq> _parser = new pb::MessageParser<ProtoOASubscribeDepthQuotesReq>(() => new ProtoOASubscribeDepthQuotesReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASubscribeDepthQuotesReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeDepthQuotesReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeDepthQuotesReq(ProtoOASubscribeDepthQuotesReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeDepthQuotesReq Clone() {
    return new ProtoOASubscribeDepthQuotesReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSubscribeDepthQuotesReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_symbolId_codec
      = pb::FieldCodec.ForInt64(24);
  private readonly pbc::RepeatedField<long> symbolId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SymbolId {
    get { return symbolId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASubscribeDepthQuotesReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASubscribeDepthQuotesReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbolId_.Equals(other.symbolId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbolId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbolId_.WriteTo(output, _repeated_symbolId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbolId_.CalculateSize(_repeated_symbolId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASubscribeDepthQuotesReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbolId_.Add(other.symbolId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          symbolId_.AddEntriesFrom(input, _repeated_symbolId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOASubscribeDepthQuotesReq request. 
/// </summary>
public sealed partial class ProtoOASubscribeDepthQuotesRes : pb::IMessage<ProtoOASubscribeDepthQuotesRes> {
  private static readonly pb::MessageParser<ProtoOASubscribeDepthQuotesRes> _parser = new pb::MessageParser<ProtoOASubscribeDepthQuotesRes>(() => new ProtoOASubscribeDepthQuotesRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASubscribeDepthQuotesRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeDepthQuotesRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeDepthQuotesRes(ProtoOASubscribeDepthQuotesRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASubscribeDepthQuotesRes Clone() {
    return new ProtoOASubscribeDepthQuotesRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSubscribeDepthQuotesRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASubscribeDepthQuotesRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASubscribeDepthQuotesRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASubscribeDepthQuotesRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for unsubscribing from the depth of market of the specified symbol. 
/// </summary>
public sealed partial class ProtoOAUnsubscribeDepthQuotesReq : pb::IMessage<ProtoOAUnsubscribeDepthQuotesReq> {
  private static readonly pb::MessageParser<ProtoOAUnsubscribeDepthQuotesReq> _parser = new pb::MessageParser<ProtoOAUnsubscribeDepthQuotesReq>(() => new ProtoOAUnsubscribeDepthQuotesReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAUnsubscribeDepthQuotesReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeDepthQuotesReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeDepthQuotesReq(ProtoOAUnsubscribeDepthQuotesReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolId_ = other.symbolId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeDepthQuotesReq Clone() {
    return new ProtoOAUnsubscribeDepthQuotesReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaUnsubscribeDepthQuotesReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_symbolId_codec
      = pb::FieldCodec.ForInt64(24);
  private readonly pbc::RepeatedField<long> symbolId_ = new pbc::RepeatedField<long>();
  /// <summary>
  /// Unique identifier of the Symbol in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SymbolId {
    get { return symbolId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAUnsubscribeDepthQuotesReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAUnsubscribeDepthQuotesReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbolId_.Equals(other.symbolId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbolId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbolId_.WriteTo(output, _repeated_symbolId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbolId_.CalculateSize(_repeated_symbolId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAUnsubscribeDepthQuotesReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbolId_.Add(other.symbolId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          symbolId_.AddEntriesFrom(input, _repeated_symbolId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOAUnsubscribeDepthQuotesReq request. 
/// </summary>
public sealed partial class ProtoOAUnsubscribeDepthQuotesRes : pb::IMessage<ProtoOAUnsubscribeDepthQuotesRes> {
  private static readonly pb::MessageParser<ProtoOAUnsubscribeDepthQuotesRes> _parser = new pb::MessageParser<ProtoOAUnsubscribeDepthQuotesRes>(() => new ProtoOAUnsubscribeDepthQuotesRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAUnsubscribeDepthQuotesRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeDepthQuotesRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeDepthQuotesRes(ProtoOAUnsubscribeDepthQuotesRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAUnsubscribeDepthQuotesRes Clone() {
    return new ProtoOAUnsubscribeDepthQuotesRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaUnsubscribeDepthQuotesRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAUnsubscribeDepthQuotesRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAUnsubscribeDepthQuotesRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAUnsubscribeDepthQuotesRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for a list of symbol categories available for a trading account. 
/// </summary>
public sealed partial class ProtoOASymbolCategoryListReq : pb::IMessage<ProtoOASymbolCategoryListReq> {
  private static readonly pb::MessageParser<ProtoOASymbolCategoryListReq> _parser = new pb::MessageParser<ProtoOASymbolCategoryListReq>(() => new ProtoOASymbolCategoryListReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolCategoryListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolCategoryListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolCategoryListReq(ProtoOASymbolCategoryListReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolCategoryListReq Clone() {
    return new ProtoOASymbolCategoryListReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolCategoryReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolCategoryListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolCategoryListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolCategoryListReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoSymbolCategoryListReq request. 
/// </summary>
public sealed partial class ProtoOASymbolCategoryListRes : pb::IMessage<ProtoOASymbolCategoryListRes> {
  private static readonly pb::MessageParser<ProtoOASymbolCategoryListRes> _parser = new pb::MessageParser<ProtoOASymbolCategoryListRes>(() => new ProtoOASymbolCategoryListRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOASymbolCategoryListRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolCategoryListRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolCategoryListRes(ProtoOASymbolCategoryListRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    symbolCategory_ = other.symbolCategory_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOASymbolCategoryListRes Clone() {
    return new ProtoOASymbolCategoryListRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaSymbolCategoryRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "symbolCategory" field.</summary>
  public const int SymbolCategoryFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProtoOASymbolCategory> _repeated_symbolCategory_codec
      = pb::FieldCodec.ForMessage(26, global::ProtoOASymbolCategory.Parser);
  private readonly pbc::RepeatedField<global::ProtoOASymbolCategory> symbolCategory_ = new pbc::RepeatedField<global::ProtoOASymbolCategory>();
  /// <summary>
  /// The list of symbol categories.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOASymbolCategory> SymbolCategory {
    get { return symbolCategory_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolCategoryListRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOASymbolCategoryListRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if(!symbolCategory_.Equals(other.symbolCategory_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    hash ^= symbolCategory_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    symbolCategory_.WriteTo(output, _repeated_symbolCategory_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    size += symbolCategory_.CalculateSize(_repeated_symbolCategory_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOASymbolCategoryListRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    symbolCategory_.Add(other.symbolCategory_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          symbolCategory_.AddEntriesFrom(input, _repeated_symbolCategory_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for logout of  trading account session.
/// </summary>
public sealed partial class ProtoOAAccountLogoutReq : pb::IMessage<ProtoOAAccountLogoutReq> {
  private static readonly pb::MessageParser<ProtoOAAccountLogoutReq> _parser = new pb::MessageParser<ProtoOAAccountLogoutReq>(() => new ProtoOAAccountLogoutReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAccountLogoutReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountLogoutReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountLogoutReq(ProtoOAAccountLogoutReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountLogoutReq Clone() {
    return new ProtoOAAccountLogoutReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAccountLogoutReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAccountLogoutReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAccountLogoutReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAccountLogoutReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response to the ProtoOATraderLogoutReq request. 
/// </summary>
public sealed partial class ProtoOAAccountLogoutRes : pb::IMessage<ProtoOAAccountLogoutRes> {
  private static readonly pb::MessageParser<ProtoOAAccountLogoutRes> _parser = new pb::MessageParser<ProtoOAAccountLogoutRes>(() => new ProtoOAAccountLogoutRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAccountLogoutRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountLogoutRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountLogoutRes(ProtoOAAccountLogoutRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountLogoutRes Clone() {
    return new ProtoOAAccountLogoutRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAccountLogoutRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAccountLogoutRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAccountLogoutRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAccountLogoutRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when the established session for an account is dropped on the server side.
///A new session must be authorized for the account.  
/// </summary>
public sealed partial class ProtoOAAccountDisconnectEvent : pb::IMessage<ProtoOAAccountDisconnectEvent> {
  private static readonly pb::MessageParser<ProtoOAAccountDisconnectEvent> _parser = new pb::MessageParser<ProtoOAAccountDisconnectEvent>(() => new ProtoOAAccountDisconnectEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAAccountDisconnectEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountDisconnectEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountDisconnectEvent(ProtoOAAccountDisconnectEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAAccountDisconnectEvent Clone() {
    return new ProtoOAAccountDisconnectEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaAccountDisconnectEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// The unique identifier of the trader's account in cTrader platform.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAccountDisconnectEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAAccountDisconnectEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAAccountDisconnectEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request for a list of existing margin call thresholds configured for a user. 
/// </summary>
public sealed partial class ProtoOAMarginCallListReq : pb::IMessage<ProtoOAMarginCallListReq> {
  private static readonly pb::MessageParser<ProtoOAMarginCallListReq> _parser = new pb::MessageParser<ProtoOAMarginCallListReq>(() => new ProtoOAMarginCallListReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAMarginCallListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallListReq(ProtoOAMarginCallListReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallListReq Clone() {
    return new ProtoOAMarginCallListReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaMarginCallListReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginCallListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAMarginCallListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAMarginCallListReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Response with a list of existing user Margin Calls, usually contains 3 items. 
/// </summary>
public sealed partial class ProtoOAMarginCallListRes : pb::IMessage<ProtoOAMarginCallListRes> {
  private static readonly pb::MessageParser<ProtoOAMarginCallListRes> _parser = new pb::MessageParser<ProtoOAMarginCallListRes>(() => new ProtoOAMarginCallListRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAMarginCallListRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallListRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallListRes(ProtoOAMarginCallListRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    marginCall_ = other.marginCall_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallListRes Clone() {
    return new ProtoOAMarginCallListRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaMarginCallListRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "marginCall" field.</summary>
  public const int MarginCallFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ProtoOAMarginCall> _repeated_marginCall_codec
      = pb::FieldCodec.ForMessage(18, global::ProtoOAMarginCall.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAMarginCall> marginCall_ = new pbc::RepeatedField<global::ProtoOAMarginCall>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProtoOAMarginCall> MarginCall {
    get { return marginCall_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginCallListRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAMarginCallListRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if(!marginCall_.Equals(other.marginCall_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    hash ^= marginCall_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    marginCall_.WriteTo(output, _repeated_marginCall_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    size += marginCall_.CalculateSize(_repeated_marginCall_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAMarginCallListRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    marginCall_.Add(other.marginCall_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 18: {
          marginCall_.AddEntriesFrom(input, _repeated_marginCall_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Request to modify marginLevelThreshold of specified marginCallType for ctidTraderAccountId. 
/// </summary>
public sealed partial class ProtoOAMarginCallUpdateReq : pb::IMessage<ProtoOAMarginCallUpdateReq> {
  private static readonly pb::MessageParser<ProtoOAMarginCallUpdateReq> _parser = new pb::MessageParser<ProtoOAMarginCallUpdateReq>(() => new ProtoOAMarginCallUpdateReq());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAMarginCallUpdateReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateReq(ProtoOAMarginCallUpdateReq other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    marginCall_ = other.marginCall_ != null ? other.marginCall_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateReq Clone() {
    return new ProtoOAMarginCallUpdateReq(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaMarginCallUpdateReq;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "marginCall" field.</summary>
  public const int MarginCallFieldNumber = 3;
  private global::ProtoOAMarginCall marginCall_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAMarginCall MarginCall {
    get { return marginCall_; }
    set {
      marginCall_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginCallUpdateReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAMarginCallUpdateReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (!object.Equals(MarginCall, other.MarginCall)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (marginCall_ != null) hash ^= MarginCall.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (marginCall_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MarginCall);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (marginCall_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarginCall);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAMarginCallUpdateReq other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.marginCall_ != null) {
      if (marginCall_ == null) {
        MarginCall = new global::ProtoOAMarginCall();
      }
      MarginCall.MergeFrom(other.MarginCall);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          if (marginCall_ == null) {
            MarginCall = new global::ProtoOAMarginCall();
          }
          input.ReadMessage(MarginCall);
          break;
        }
      }
    }
  }

}

/// <summary>
///* If this response received, it means that margin call was successfully updated. 
/// </summary>
public sealed partial class ProtoOAMarginCallUpdateRes : pb::IMessage<ProtoOAMarginCallUpdateRes> {
  private static readonly pb::MessageParser<ProtoOAMarginCallUpdateRes> _parser = new pb::MessageParser<ProtoOAMarginCallUpdateRes>(() => new ProtoOAMarginCallUpdateRes());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAMarginCallUpdateRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateRes(ProtoOAMarginCallUpdateRes other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateRes Clone() {
    return new ProtoOAMarginCallUpdateRes(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaMarginCallUpdateRes;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginCallUpdateRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAMarginCallUpdateRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAMarginCallUpdateRes other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when a Margin Call threshold configuration is updated. 
/// </summary>
public sealed partial class ProtoOAMarginCallUpdateEvent : pb::IMessage<ProtoOAMarginCallUpdateEvent> {
  private static readonly pb::MessageParser<ProtoOAMarginCallUpdateEvent> _parser = new pb::MessageParser<ProtoOAMarginCallUpdateEvent>(() => new ProtoOAMarginCallUpdateEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAMarginCallUpdateEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateEvent(ProtoOAMarginCallUpdateEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    marginCall_ = other.marginCall_ != null ? other.marginCall_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallUpdateEvent Clone() {
    return new ProtoOAMarginCallUpdateEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaMarginCallUpdateEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "marginCall" field.</summary>
  public const int MarginCallFieldNumber = 3;
  private global::ProtoOAMarginCall marginCall_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAMarginCall MarginCall {
    get { return marginCall_; }
    set {
      marginCall_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginCallUpdateEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAMarginCallUpdateEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (!object.Equals(MarginCall, other.MarginCall)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (marginCall_ != null) hash ^= MarginCall.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (marginCall_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MarginCall);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (marginCall_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarginCall);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAMarginCallUpdateEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.marginCall_ != null) {
      if (marginCall_ == null) {
        MarginCall = new global::ProtoOAMarginCall();
      }
      MarginCall.MergeFrom(other.MarginCall);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          if (marginCall_ == null) {
            MarginCall = new global::ProtoOAMarginCall();
          }
          input.ReadMessage(MarginCall);
          break;
        }
      }
    }
  }

}

/// <summary>
///* Event that is sent when account margin level reaches target marginLevelThreshold. Event is sent no more than once every 10 minutes to avoid spamming. 
/// </summary>
public sealed partial class ProtoOAMarginCallTriggerEvent : pb::IMessage<ProtoOAMarginCallTriggerEvent> {
  private static readonly pb::MessageParser<ProtoOAMarginCallTriggerEvent> _parser = new pb::MessageParser<ProtoOAMarginCallTriggerEvent>(() => new ProtoOAMarginCallTriggerEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProtoOAMarginCallTriggerEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiMessagesReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallTriggerEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallTriggerEvent(ProtoOAMarginCallTriggerEvent other) : this() {
    _hasBits0 = other._hasBits0;
    payloadType_ = other.payloadType_;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    marginCall_ = other.marginCall_ != null ? other.marginCall_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProtoOAMarginCallTriggerEvent Clone() {
    return new ProtoOAMarginCallTriggerEvent(this);
  }

  /// <summary>Field number for the "payloadType" field.</summary>
  public const int PayloadTypeFieldNumber = 1;
  private readonly static global::ProtoOAPayloadType PayloadTypeDefaultValue = global::ProtoOAPayloadType.ProtoOaMarginCallTriggerEvent;

  private global::ProtoOAPayloadType payloadType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAPayloadType PayloadType {
    get { if ((_hasBits0 & 1) != 0) { return payloadType_; } else { return PayloadTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      payloadType_ = value;
    }
  }
  /// <summary>Gets whether the "payloadType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayloadType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "payloadType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayloadType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 2;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 2) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "marginCall" field.</summary>
  public const int MarginCallFieldNumber = 3;
  private global::ProtoOAMarginCall marginCall_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoOAMarginCall MarginCall {
    get { return marginCall_; }
    set {
      marginCall_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginCallTriggerEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProtoOAMarginCallTriggerEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayloadType != other.PayloadType) return false;
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (!object.Equals(MarginCall, other.MarginCall)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayloadType) hash ^= PayloadType.GetHashCode();
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (marginCall_ != null) hash ^= MarginCall.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayloadType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(16);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (marginCall_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MarginCall);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayloadType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayloadType);
    }
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (marginCall_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarginCall);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProtoOAMarginCallTriggerEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasPayloadType) {
      PayloadType = other.PayloadType;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.marginCall_ != null) {
      if (marginCall_ == null) {
        MarginCall = new global::ProtoOAMarginCall();
      }
      MarginCall.MergeFrom(other.MarginCall);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PayloadType = (global::ProtoOAPayloadType) input.ReadEnum();
          break;
        }
        case 16: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 26: {
          if (marginCall_ == null) {
            MarginCall = new global::ProtoOAMarginCall();
          }
          input.ReadMessage(MarginCall);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
